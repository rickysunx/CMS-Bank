/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.lowcost.card;

import java.util.*;
import java.rmi.*;

import nc.bs.lowcost.type.TypeDMO;
import nc.bs.pub.*;
import nc.vo.lowcost.card.*;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
/**
 * Card的BO类
 *
 * 创建日期：(2005-9-16)
 * @author：
 */
public class CardBO extends BusinessObject {

/**
	 * 
	 */
	private static final long serialVersionUID = 2770137194800228372L;

/**
 * CardBO 构造子注解。
 */
public CardBO() {
	super();
}
/**
 * EJB规范中要求的方法。
 *
 * 创建日期：(2005-9-16)
 */
public void ejbCreate() {}
/**
 * 通过主键获得VO对象。
 *
 * 创建日期：(2005-9-16)
 * @return nc.vo.lowcost.card.CardVO
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
public CardVO findByPrimaryKey(String key) throws java.rmi.RemoteException {

	CardVO card = null;
	try {
		CardDMO dmo = new CardDMO();
		card = dmo.findByPrimaryKey(key);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBean::findByPrimaryKey(CardPK) Exception!", e);
	}
	return card;
}
/**
 * 向数据库中插入一个VO对象。
 *
 * 创建日期：(2005-9-16)
 * @param card nc.vo.lowcost.card.CardVO
 * @return java.lang.String  所插入VO对象的主键字符串。
 * @exception java.rmi.RemoteException 异常说明。
 */
public String insert(CardVO card) throws RemoteException {

	try {
		CardDMO dmo = new CardDMO();
		//校验是否有重复的编码
		if(card.getLccode()!=null&&card.getLccode().trim().length()>0){
		    dmo.checkCardCode(card.getLccode(),null);
		}
		/*
		if(!(new TypeDMO()).isLeafNode(card.getPk_lctype())){
		    throw new Exception ("物品类别为非末级物品类别");
		}
		*/
		String key = dmo.insert(card);
		return key;
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBO::insert(CardVO) Exception!", e);
	}
}

public void copy(CardVO vo,int n) throws RemoteException {
    try {
        vo.setLccode(null);
        vo.setTallydate(null);
        vo.setTallyflag(new UFBoolean(false));
        vo.setCanceldate(null);
        vo.setCancelflag(new UFBoolean(false));
        for (int i = 0; i < n; i++) {
            (new CardDMO()).insert(vo);
        }
    } catch (Exception e){
        e.printStackTrace();
        throw new RemoteException(e.getMessage());
    }
}
/**
 * 向数据库中插入一批VO对象。
 *
 * 创建日期：(2005-9-16)
 * @param card nc.vo.lowcost.card.CardVO[]
 * @return java.lang.String[]  所插入VO对象数组的主键字符串数组。
 * @exception java.rmi.RemoteException 异常说明。
 */
public String[] insertArray(CardVO[] cards) throws RemoteException {

	try {
		CardDMO dmo = new CardDMO();
		
		for (int i = 0; i < cards.length; i++) {
		    try {
	            cards[i].setLccode(null/*dmo.getLcCode(cards[i].getDef5())*/);
	            cards[i].setPk_lctype(dmo.getLcTypePkByCode(cards[i].getPk_lctype()));
	            cards[i].setPk_managedept(dmo.getDeptPkByCode(cards[i].getDef5(),cards[i].getPk_managedept()));
	            cards[i].setPk_usedept(dmo.getDeptPkByCode(cards[i].getDef5(),cards[i].getPk_usedept()));
	            cards[i].setTallyflag(new UFBoolean(true));
	            cards[i].setTallydate(new UFDate(new Date()));
	            if(cards[i].getDef1()!=null && cards[i].getDef1().trim().length()>0){
	                cards[i].setDef1(dmo.getPsndocPkByCode(cards[i].getDef5(),cards[i].getDef1()));
	            }
			    dmo.insert(cards[i]);
		    } catch (Exception e) {
		        throw new Exception ("导入第" + (i+2) +"行数据出错：" + e.getMessage());
		    }
        }
		
		//String[] keys = dmo.insertArray(cards);
		return null;
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBO::insertArray(CardVO[]) Exception!", e);
	}
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2005-9-16)
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
public void delete(CardVO vo) throws java.rmi.RemoteException {

	try {
		CardDMO dmo = new CardDMO();
		dmo.delete(vo);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBO::delete(CardPK) Exception!", e);
	}
}
/**
 * 用VO对象的属性值更新数据库。
 *
 * 创建日期：(2005-9-16)
 * @param card nc.vo.lowcost.card.CardVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public void update(CardVO card) throws java.rmi.RemoteException {

	try {
		CardDMO dmo = new CardDMO();
		//dmo.checkCardCode(card.getLccode(),card.getPk_lccard());
		if(!(new TypeDMO()).isLeafNode(card.getPk_lctype())){
		    throw new Exception ("物品类别为非末级物品类别");
		}
		dmo.update(card);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBO::update(CardVO) Exception!", e);
	}
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 创建日期：(2005-9-16)
 * @return nc.vo.lowcost.card.CardVO[] 查到的VO对象数组
 * @param unitCode int
 * @exception java.rmi.RemoteException 异常说明。
 */
public CardVO[] queryAll(String pk_corp) throws java.rmi.RemoteException {

	CardVO[] cards = null;
	try {
		CardDMO dmo = new CardDMO();
		cards = dmo.queryAll(pk_corp);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBean::queryAll(String pk_corp) Exception!", e);
	}
	return cards;
}

public Vector getControlPks(String corp,String user,String objname) throws RemoteException{
	Vector pks = null;
	try {
		CardDMO dmo = new CardDMO();
		pks = dmo.getControlPks(corp,user,objname);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBean::getControlPks(String pk_corp,String user,String objname) Exception!", e);
	}
	return pks;
}

public boolean isControl(String corp,String objname) throws RemoteException{
	boolean flag = false;
	try {
		CardDMO dmo = new CardDMO();
		flag = dmo.isControl(corp,objname);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBean::isControl(String corp,String objname) Exception!", e);
	}
	return flag;
}
/**
 * 根据VO中所设定的条件返回所有符合条件的VO数组
 *
 * 创建日期：(2005-9-16)
 * @return nc.vo.lowcost.card.CardVO[]
 * @param cardVO nc.vo.lowcost.card.CardVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public CardVO[] queryByVO(CardVO condCardVO, Boolean isAnd) throws java.rmi.RemoteException {

	CardVO[] cards = null;
	try {
		CardDMO dmo = new CardDMO();
		cards = dmo.queryByVO(condCardVO, isAnd);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBean::queryByVO(CardVO condCardVO, Boolean isAnd) Exception!", e);
	}
	return cards;
}

public CardVO[] queryByCondVO(CardVO condVO) throws RemoteException {
	CardVO[] cards = null;
	try {
		CardDMO dmo = new CardDMO();
		cards = dmo.queryByCondVO(condVO);
	}catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBean::queryByCondVO(CardVO condVO) Exception!", e);
	}
	return cards;
}

public CardVO [] queryByWhereSqlAndWithUseDept(String whereSql) throws RemoteException {
	CardVO[] cards = null;
	try {
		CardDMO dmo = new CardDMO();
		cards = dmo.queryByWhereSqlAndWithUseDept(whereSql);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("CardBean::queryByWhereSqlAndWithUseDept(String whereSql) Exception!", e);
	}
	return cards;    
}

public String getLcCode(String prefix) throws RemoteException {
    String lcCode = null;
    try {
        lcCode = (new CardDMO()).getLcCode(prefix);
    } catch (Exception e){
        reportException(e);
        throw new RemoteException(e.getMessage());
    }
    return lcCode;
}

public void check(CardVO [] vos,String pk_checker) throws RemoteException {
    try {
        (new CardDMO()).check(vos,pk_checker);
    } catch (Exception e){
        e.printStackTrace();
        throw new RemoteException(e.getMessage());
    }
}
}