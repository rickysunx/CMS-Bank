/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.lowcost.card;

import java.sql.*;
import java.math.*;
import java.util.*;

import nc.bs.lowcost.type.TypeDMO;
import nc.bs.mw.sql.UFConnection;
import nc.bs.pub.*;
import nc.vo.pub.lang.*;
import nc.vo.lowcost.card.*;
import nc.vo.lowcost.pub.LCTools;
import nc.vo.lowcost.type.TypeVO;
import nc.bs.bd.b04.DeptdocBO;
import nc.vo.bd.b04.DeptdocVO;
/**
 * Card的DMO类。
 *
 * 创建日期：(2005-9-16)
 * @author：
 */
public class CardDMO extends DataManageObject {
/**
 * CardDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public CardDMO() throws javax.naming.NamingException, SystemException {
	super();
}
/**
 * CardDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public CardDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2005-9-16)
 * @return nc.vo.lowcost.card.CardVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public CardVO findByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.card.CardDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/
	
	String sqldb2 = "select lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, number, remark, def1, def2, def3, def4, def5 from lc_card where pk_lccard = ?";
	String sql = "select lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, \"number\", remark, def1, def2, def3, def4, def5 from lc_card where pk_lccard = ?";
	CardVO card = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		if(isDB2(con)){
		    stmt = con.prepareStatement(sqldb2);
		} else {
		    stmt = con.prepareStatement(sql);
		}
		
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			card = new CardVO(key);
			// lccode :
			String lccode = rs.getString(1);
			card.setLccode(lccode == null ? null : lccode.trim());
			// lcname :
			String lcname = rs.getString(2);
			card.setLcname(lcname == null ? null : lcname.trim());
			// pk_lctype :
			String pk_lctype = rs.getString(3);
			card.setPk_lctype(pk_lctype == null ? null : pk_lctype.trim());
			// pk_managedept :
			String pk_managedept = rs.getString(4);
			card.setPk_managedept(pk_managedept == null ? null : pk_managedept.trim());
			// pk_usedept :
			String pk_usedept = rs.getString(5);
			card.setPk_usedept(pk_usedept == null ? null : pk_usedept.trim());
			// tallyflag :
			String tallyflag = rs.getString(6);
			card.setTallyflag(tallyflag == null ? null : new UFBoolean(tallyflag.trim()));
			// cancelflag :
			String cancelflag = rs.getString(7);
			card.setCancelflag(cancelflag == null ? null : new UFBoolean(cancelflag.trim()));
			// buydate :
			String buydate = rs.getString(8);
			card.setBuydate(buydate == null ? null : new UFDate(buydate.trim()));
			// adddate :
			String adddate = rs.getString(9);
			card.setAdddate(adddate == null ? null : new UFDate(adddate.trim()));
			// tallydate :
			String tallydate = rs.getString(10);
			card.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			// canceldate :
			String canceldate = rs.getString(11);
			card.setCanceldate(canceldate == null ? null : new UFDate(canceldate.trim()));
			// price :
			BigDecimal price = (BigDecimal)rs.getObject(12);
			card.setPrice(price == null ? null : new UFDouble(price));
			// number :
			BigDecimal number = (BigDecimal)rs.getObject(13);
			card.setNumber(number == null ? null : new UFDouble(number));
			// remark :
			String remark = rs.getString(14);
			card.setRemark(remark == null ? null : remark.trim());
			// def1 :
			String def1 = rs.getString(15);
			card.setDef1(def1 == null ? null : def1.trim());
			// def2 :
			String def2 = rs.getString(16);
			card.setDef2(def2 == null ? null : def2.trim());
			// def3 :
			String def3 = rs.getString(17);
			card.setDef3(def3 == null ? null : def3.trim());
			// def4 :
			String def4 = rs.getString(18);
			card.setDef4(def4 == null ? null : def4.trim());
			// def5 :
			String def5 = rs.getString(19);
			card.setDef5(def5 == null ? null : def5.trim());
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.card.CardDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return card;
}
/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2005-9-16)
 * @param node nc.vo.lowcost.card.CardVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insert(CardVO card) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.card.CardDMO", "insert", new Object[]{card});
	/*************************************************************/
	card = (CardVO)card.clone();
	if(card.getLccode()==null||card.getLccode().trim().length()==0) {
		String lcCode = null;
		String prefix = "";
		String codeMethod = LCTools.getParam(null,"LC11");
		String codeLen = LCTools.getParam(null,"LC12");
		if(codeMethod==null||codeMethod.trim().equals("")){
		    throw new SQLException("没有设置编码方式");
		}
		if(codeLen==null||codeMethod.trim().equals("")){
		    throw new SQLException("没有设置编码长度");
		}
		String lctypecode = null;
		String unitcode = null;
		try {
			lctypecode = getLctypecodeByPk(card.getPk_lctype());
			unitcode = queryUnitCodeByDept(card.getPk_usedept());
		} catch (Exception e){
		    e.printStackTrace();
		    throw new SQLException (e.getMessage());
		}
		if(codeMethod.equals("类别编码+序列号")){
		    prefix = lctypecode;
		}
		if(codeMethod.equals("公司编码+序列号")){
		    prefix = unitcode;
		}
		if(codeMethod.equals("公司编码+类别编码+序列号")){
		    prefix = unitcode + lctypecode;
		}
		lcCode = getLcCode(prefix,queryPkCorpByDept(card.getPk_usedept()));
		card.setLccode(lcCode);
	}
	String sqldb2 = "insert into lc_card(pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, number, remark, def1, def2, def3, def4, def5) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	String sql = "insert into lc_card(pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, \"number\", remark, def1, def2, def3, def4, def5) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		key = getOID();
		con = getConnection();
		if(isDB2(con)){
		    stmt = con.prepareStatement(sqldb2);
		} else {
		    stmt = con.prepareStatement(sql);
		}
		
		// set PK fields:
		stmt.setString(1, key);
		// set non PK fields:
		if (card.getLccode() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, card.getLccode());
		}
		if (card.getLcname() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, card.getLcname());
		}
		if (card.getPk_lctype() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, card.getPk_lctype());
		}
		if (card.getPk_managedept() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, card.getPk_managedept());
		}
		if (card.getPk_usedept() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, card.getPk_usedept());
		}
		if (card.getTallyflag() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, card.getTallyflag().toString());
		}
		if (card.getCancelflag() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, card.getCancelflag().toString());
		}
		if (card.getBuydate() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, card.getBuydate().toString());
		}
		if (card.getAdddate() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, card.getAdddate().toString());
		}
		if (card.getTallydate() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, card.getTallydate().toString());
		}
		if (card.getCanceldate() == null) {
			stmt.setNull(12, Types.CHAR);
		}
		else {
			stmt.setString(12, card.getCanceldate().toString());
		}
		if (card.getPrice() == null) {
			stmt.setNull(13, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(13, card.getPrice().toBigDecimal());
		}
		if (card.getNumber() == null) {
			stmt.setNull(14, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(14, card.getNumber().toBigDecimal());
		}
		if (card.getRemark() == null) {
			stmt.setNull(15, Types.CHAR);
		}
		else {
			stmt.setString(15, card.getRemark());
		}
		if (card.getDef1() == null) {
			stmt.setNull(16, Types.CHAR);
		}
		else {
			stmt.setString(16, card.getDef1());
		}
		if (card.getDef2() == null) {
			stmt.setNull(17, Types.CHAR);
		}
		else {
			stmt.setString(17, card.getDef2());
		}
		if (card.getDef3() == null) {
			stmt.setNull(18, Types.CHAR);
		}
		else {
			stmt.setString(18, card.getDef3());
		}
		if (card.getDef4() == null) {
			stmt.setNull(19, Types.CHAR);
		}
		else {
			stmt.setString(19, card.getDef4());
		}
		if (card.getDef5() == null) {
			stmt.setNull(20, Types.CHAR);
		}
		else {
			stmt.setString(20, card.getDef5());
		}
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.card.CardDMO", "insert", new Object[]{card});
	/*************************************************************/

	return key;
}
/**
 * 向数据库插入一批VO对象。
 *
 * 创建日期：(2005-9-16)
 * @param cards nc.vo.lowcost.card.CardVO[]
 * @exception java.sql.SQLException 异常说明。
 */
public String[] insertArray(CardVO[] cards) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.card.CardDMO", "insertArray", new Object[]{cards});
	/*************************************************************/

	String sql = "insert into lc_card(pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, \"number\", remark, def1, def2, def3, def4, def5) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	String sqldb2 = "insert into lc_card(pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, number, remark, def1, def2, def3, def4, def5) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	String[] keys = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		keys = getOIDs(cards.length);
		con = getConnection();
		if(isDB2(con)){
		    stmt = con.prepareStatement(sqldb2);
		} else {
		    stmt = con.prepareStatement(sql);
		}
		
		for (int i = 0; i < cards.length; i++) {
			// set PK fields:
			stmt.setString(1, keys[i]);
			// set non PK fields:
			if (cards[i].getLccode() == null) {
				stmt.setNull(2, Types.CHAR);
			}
			else {
				stmt.setString(2, cards[i].getLccode());
			}
			if (cards[i].getLcname() == null) {
				stmt.setNull(3, Types.CHAR);
			}
			else {
				stmt.setString(3, cards[i].getLcname());
			}
			if (cards[i].getPk_lctype() == null) {
				stmt.setNull(4, Types.CHAR);
			}
			else {
				stmt.setString(4, cards[i].getPk_lctype());
			}
			if (cards[i].getPk_managedept() == null) {
				stmt.setNull(5, Types.CHAR);
			}
			else {
				stmt.setString(5, cards[i].getPk_managedept());
			}
			if (cards[i].getPk_usedept() == null) {
				stmt.setNull(6, Types.CHAR);
			}
			else {
				stmt.setString(6, cards[i].getPk_usedept());
			}
			if (cards[i].getTallyflag() == null) {
				stmt.setNull(7, Types.CHAR);
			}
			else {
				stmt.setString(7, cards[i].getTallyflag().toString());
			}
			if (cards[i].getCancelflag() == null) {
				stmt.setNull(8, Types.CHAR);
			}
			else {
				stmt.setString(8, cards[i].getCancelflag().toString());
			}
			if (cards[i].getBuydate() == null) {
				stmt.setNull(9, Types.CHAR);
			}
			else {
				stmt.setString(9, cards[i].getBuydate().toString());
			}
			if (cards[i].getAdddate() == null) {
				stmt.setNull(10, Types.CHAR);
			}
			else {
				stmt.setString(10, cards[i].getAdddate().toString());
			}
			if (cards[i].getTallydate() == null) {
				stmt.setNull(11, Types.CHAR);
			}
			else {
				stmt.setString(11, cards[i].getTallydate().toString());
			}
			if (cards[i].getCanceldate() == null) {
				stmt.setNull(12, Types.CHAR);
			}
			else {
				stmt.setString(12, cards[i].getCanceldate().toString());
			}
			if (cards[i].getPrice() == null) {
				stmt.setNull(13, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(13, cards[i].getPrice().toBigDecimal());
			}
			if (cards[i].getNumber() == null) {
				stmt.setNull(14, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(14, cards[i].getNumber().toBigDecimal());
			}
			if (cards[i].getRemark() == null) {
				stmt.setNull(15, Types.CHAR);
			}
			else {
				stmt.setString(15, cards[i].getRemark());
			}
			if (cards[i].getDef1() == null) {
				stmt.setNull(16, Types.CHAR);
			}
			else {
				stmt.setString(16, cards[i].getDef1());
			}
			if (cards[i].getDef2() == null) {
				stmt.setNull(17, Types.CHAR);
			}
			else {
				stmt.setString(17, cards[i].getDef2());
			}
			if (cards[i].getDef3() == null) {
				stmt.setNull(18, Types.CHAR);
			}
			else {
				stmt.setString(18, cards[i].getDef3());
			}
			if (cards[i].getDef4() == null) {
				stmt.setNull(19, Types.CHAR);
			}
			else {
				stmt.setString(19, cards[i].getDef4());
			}
			if (cards[i].getDef5() == null) {
				stmt.setNull(20, Types.CHAR);
			}
			else {
				stmt.setString(20, cards[i].getDef5());
			}
			//
			stmt.executeUpdate();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.card.CardDMO", "insertArray", new Object[]{cards});
	/*************************************************************/

	return keys;
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2005-9-16)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(CardVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.card.CardDMO", "delete", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from lc_card where pk_lccard = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.card.CardDMO", "delete", new Object[]{vo});
	/*************************************************************/
}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2005-9-16)
 * @param card nc.vo.lowcost.card.CardVO
 * @exception java.sql.SQLException 异常说明。
 */
public void update(CardVO card) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.card.CardDMO", "update", new Object[]{card});
	/*************************************************************/

	String sql = "update lc_card set lccode = ?, lcname = ?, pk_lctype = ?, pk_managedept = ?, pk_usedept = ?, tallyflag = ?, cancelflag = ?, buydate = ?, adddate = ?, tallydate = ?, canceldate = ?, price = ?, \"number\" = ?, remark = ?, def1 = ?, def2 = ?, def3 = ?, def4 = ?, def5 = ? where pk_lccard = ?";
	String sqldb2 = "update lc_card set lccode = ?, lcname = ?, pk_lctype = ?, pk_managedept = ?, pk_usedept = ?, tallyflag = ?, cancelflag = ?, buydate = ?, adddate = ?, tallydate = ?, canceldate = ?, price = ?, number = ?, remark = ?, def1 = ?, def2 = ?, def3 = ?, def4 = ?, def5 = ? where pk_lccard = ?";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		if(isDB2(con)){
		    stmt = con.prepareStatement(sqldb2);
		} else {
		    stmt = con.prepareStatement(sql);
		}
		
		// update non PK fields:
		if (card.getLccode() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, card.getLccode());
		}
		if (card.getLcname() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, card.getLcname());
		}
		if (card.getPk_lctype() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, card.getPk_lctype());
		}
		if (card.getPk_managedept() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, card.getPk_managedept());
		}
		if (card.getPk_usedept() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, card.getPk_usedept());
		}
		if (card.getTallyflag() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, card.getTallyflag().toString());
		}
		if (card.getCancelflag() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, card.getCancelflag().toString());
		}
		if (card.getBuydate() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, card.getBuydate().toString());
		}
		if (card.getAdddate() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, card.getAdddate().toString());
		}
		if (card.getTallydate() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, card.getTallydate().toString());
		}
		if (card.getCanceldate() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, card.getCanceldate().toString());
		}
		if (card.getPrice() == null) {
			stmt.setNull(12, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(12, card.getPrice().toBigDecimal());
		}
		if (card.getNumber() == null) {
			stmt.setNull(13, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(13, card.getNumber().toBigDecimal());
		}
		if (card.getRemark() == null) {
			stmt.setNull(14, Types.CHAR);
		}
		else {
			stmt.setString(14, card.getRemark());
		}
		if (card.getDef1() == null) {
			stmt.setNull(15, Types.CHAR);
		}
		else {
			stmt.setString(15, card.getDef1());
		}
		if (card.getDef2() == null) {
			stmt.setNull(16, Types.CHAR);
		}
		else {
			stmt.setString(16, card.getDef2());
		}
		if (card.getDef3() == null) {
			stmt.setNull(17, Types.CHAR);
		}
		else {
			stmt.setString(17, card.getDef3());
		}
		if (card.getDef4() == null) {
			stmt.setNull(18, Types.CHAR);
		}
		else {
			stmt.setString(18, card.getDef4());
		}
		if (card.getDef5() == null) {
			stmt.setNull(19, Types.CHAR);
		}
		else {
			stmt.setString(19, card.getDef5());
		}
		// find record by PK fields:
		stmt.setString(20, card.getPrimaryKey());
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.card.CardDMO", "update", new Object[]{card});
	/*************************************************************/
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2005-9-16)
 * @return nc.vo.lowcost.card.CardVO[]
 * @param unitCode int
 * @exception java.sql.SQLException 异常说明。
 */
public CardVO[] queryAll(String pk_corp) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.card.CardDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	String sql = "";
	String sqldb2 = "";
	if (pk_corp != null) {
		sql = "select pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, \"number\", remark, def1, def2, def3, def4, def5 from lc_card where pk_corp = ?";
		sqldb2 = "select pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, number, remark, def1, def2, def3, def4, def5 from lc_card where pk_corp = ?";
	}
	else {
		sql ="select pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, \"number\", remark, def1, def2, def3, def4, def5 from lc_card";
		sqldb2 ="select pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, number, remark, def1, def2, def3, def4, def5 from lc_card";
	}

	CardVO cards[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		if(isDB2(con)){
		    stmt = con.prepareStatement(sqldb2);
		} else {
		    stmt = con.prepareStatement(sql);
		}
		
		if (pk_corp != null) {
			stmt.setString(1, pk_corp);
		}
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			CardVO card = new CardVO();
			// pk_lccard :
			String pk_lccard = rs.getString(1);
			card.setPk_lccard(pk_lccard == null ? null : pk_lccard.trim());
			// lccode :
			String lccode = rs.getString(2);
			card.setLccode(lccode == null ? null : lccode.trim());
			// lcname :
			String lcname = rs.getString(3);
			card.setLcname(lcname == null ? null : lcname.trim());
			// pk_lctype :
			String pk_lctype = rs.getString(4);
			card.setPk_lctype(pk_lctype == null ? null : pk_lctype.trim());
			// pk_managedept :
			String pk_managedept = rs.getString(5);
			card.setPk_managedept(pk_managedept == null ? null : pk_managedept.trim());
			// pk_usedept :
			String pk_usedept = rs.getString(6);
			card.setPk_usedept(pk_usedept == null ? null : pk_usedept.trim());
			// tallyflag :
			String tallyflag = rs.getString(7);
			card.setTallyflag(tallyflag == null ? null : new UFBoolean(tallyflag.trim()));
			// cancelflag :
			String cancelflag = rs.getString(8);
			card.setCancelflag(cancelflag == null ? null : new UFBoolean(cancelflag.trim()));
			// buydate :
			String buydate = rs.getString(9);
			card.setBuydate(buydate == null ? null : new UFDate(buydate.trim()));
			// adddate :
			String adddate = rs.getString(10);
			card.setAdddate(adddate == null ? null : new UFDate(adddate.trim()));
			// tallydate :
			String tallydate = rs.getString(11);
			card.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			// canceldate :
			String canceldate = rs.getString(12);
			card.setCanceldate(canceldate == null ? null : new UFDate(canceldate.trim()));
			// price :
			BigDecimal price = (BigDecimal)rs.getObject(13);
			card.setPrice(price == null ? null : new UFDouble(price));
			// number :
			BigDecimal number = (BigDecimal)rs.getObject(14);
			card.setNumber(number == null ? null : new UFDouble(number));
			// remark :
			String remark = rs.getString(15);
			card.setRemark(remark == null ? null : remark.trim());
			// def1 :
			String def1 = rs.getString(16);
			card.setDef1(def1 == null ? null : def1.trim());
			// def2 :
			String def2 = rs.getString(17);
			card.setDef2(def2 == null ? null : def2.trim());
			// def3 :
			String def3 = rs.getString(18);
			card.setDef3(def3 == null ? null : def3.trim());
			// def4 :
			String def4 = rs.getString(19);
			card.setDef4(def4 == null ? null : def4.trim());
			// def5 :
			String def5 = rs.getString(20);
			card.setDef5(def5 == null ? null : def5.trim());

			v.addElement(card);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	cards = new CardVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(cards);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.card.CardDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	return cards;
}
/**
 * 根据VO中所设定的条件返回所有符合条件的VO数组
 *
 * 创建日期：(2005-9-16)
 * @return nc.vo.lowcost.card.CardVO[]
 * @param cardVO nc.vo.lowcost.card.CardVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public CardVO[] queryByVO(CardVO condCardVO, Boolean isAnd) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.card.CardDMO", "queryByVO", new Object[]{condCardVO, isAnd});
	/*************************************************************/


	int index = 0;
	CardVO cards[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		String strSql = null;
		if(isDB2(con)){
		    strSql = "select pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, number, remark, def1, def2, def3, def4, def5 from lc_card";
		} else {
		    strSql = "select pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, \"number\", remark, def1, def2, def3, def4, def5 from lc_card";
		}
		
		String strConditionNames = "";
		String strAndOr = "and ";
		if (!isAnd.booleanValue()) {
			strAndOr = "or  ";
		}
		if (condCardVO.getLccode() != null) {
			strConditionNames += strAndOr + "lccode=? ";
		}
		if (condCardVO.getLcname() != null) {
			strConditionNames += strAndOr + "lcname=? ";
		}
		if (condCardVO.getPk_lctype() != null) {
		    String lctypecode = null;
		    try {
		        TypeVO vo = (new TypeDMO()).findByPrimaryKey(condCardVO.getPk_lctype());
		        lctypecode = vo.getLctypecode();
		    } catch (Exception e){
		        e.printStackTrace();
		    }
		    if(lctypecode==null){
		        strConditionNames += strAndOr + "pk_lctype='" + condCardVO.getPk_lctype() + "' ";
		    } else {
		        strConditionNames += strAndOr + "pk_lctype in (select pk_lctype from lc_type where lctypecode like '" + lctypecode + "%' ";  //查非末级物品类别时更正
		    }
		}
		if (condCardVO.getPk_managedept() != null) {
			strConditionNames += strAndOr + "pk_managedept=? ";
		}
		if (condCardVO.getPk_usedept() != null) {
			strConditionNames += strAndOr + "pk_usedept=? ";
		}
		if (condCardVO.getTallyflag() != null) {
			strConditionNames += strAndOr + "tallyflag=? ";
		}
		if (condCardVO.getCancelflag() != null) {
			strConditionNames += strAndOr + "cancelflag=? ";
		}
		if (condCardVO.getBuydate() != null) {
			strConditionNames += strAndOr + "buydate=? ";
		}
		if (condCardVO.getAdddate() != null) {
			strConditionNames += strAndOr + "adddate=? ";
		}
		if (condCardVO.getTallydate() != null) {
			strConditionNames += strAndOr + "tallydate=? ";
		}
		if (condCardVO.getCanceldate() != null) {
			strConditionNames += strAndOr + "canceldate=? ";
		}
		if (condCardVO.getPrice() != null) {
			strConditionNames += strAndOr + "price=? ";
		}
		if (condCardVO.getNumber() != null) {
		    if(isDB2(con)){
		        strConditionNames += strAndOr + "number=? ";
		    } else {
		        strConditionNames += strAndOr + "\"number\"=? ";
		    }
			
		}
		if (condCardVO.getRemark() != null) {
			strConditionNames += strAndOr + "remark=? ";
		}
		if (condCardVO.getDef1() != null) {
			strConditionNames += strAndOr + "def1=? ";
		}
		if (condCardVO.getDef2() != null) {
			strConditionNames += strAndOr + "def2=? ";
		}
		if (condCardVO.getDef3() != null) {
			strConditionNames += strAndOr + "def3=? ";
		}
		if (condCardVO.getDef4() != null) {
			strConditionNames += strAndOr + "def4=? ";
		}
		if (condCardVO.getDef5() != null) {
			strConditionNames += strAndOr + "def5=? ";
		}
		if (strConditionNames.length() > 0) {
			strConditionNames = strConditionNames.substring(3, strConditionNames.length() - 1);
		}
		else {
			return queryAll(null);
		}
		//拼接后的SQL语句
		strSql = strSql + " where " + strConditionNames;
		//
		stmt = con.prepareStatement(strSql);
		// set query condition fields:
		// set non PK fields:
		if (condCardVO.getLccode() != null) {
			stmt.setString(++index, condCardVO.getLccode());
		}
		if (condCardVO.getLcname() != null) {
			stmt.setString(++index, condCardVO.getLcname());
		}
//		if (condCardVO.getPk_lctype() != null) {
//			stmt.setString(++index, condCardVO.getPk_lctype());
//		}
		if (condCardVO.getPk_managedept() != null) {
			stmt.setString(++index, condCardVO.getPk_managedept());
		}
		if (condCardVO.getPk_usedept() != null) {
			stmt.setString(++index, condCardVO.getPk_usedept());
		}
		if (condCardVO.getTallyflag() != null) {
			stmt.setString(++index, condCardVO.getTallyflag().toString());
		}
		if (condCardVO.getCancelflag() != null) {
			stmt.setString(++index, condCardVO.getCancelflag().toString());
		}
		if (condCardVO.getBuydate() != null) {
			stmt.setString(++index, condCardVO.getBuydate().toString());
		}
		if (condCardVO.getAdddate() != null) {
			stmt.setString(++index, condCardVO.getAdddate().toString());
		}
		if (condCardVO.getTallydate() != null) {
			stmt.setString(++index, condCardVO.getTallydate().toString());
		}
		if (condCardVO.getCanceldate() != null) {
			stmt.setString(++index, condCardVO.getCanceldate().toString());
		}
		if (condCardVO.getPrice() != null) {
			stmt.setBigDecimal(++index, condCardVO.getPrice().toBigDecimal());
		}
		if (condCardVO.getNumber() != null) {
			stmt.setBigDecimal(++index, condCardVO.getNumber().toBigDecimal());
		}
		if (condCardVO.getRemark() != null) {
			stmt.setString(++index, condCardVO.getRemark());
		}
		if (condCardVO.getDef1() != null) {
			stmt.setString(++index, condCardVO.getDef1());
		}
		if (condCardVO.getDef2() != null) {
			stmt.setString(++index, condCardVO.getDef2());
		}
		if (condCardVO.getDef3() != null) {
			stmt.setString(++index, condCardVO.getDef3());
		}
		if (condCardVO.getDef4() != null) {
			stmt.setString(++index, condCardVO.getDef4());
		}
		if (condCardVO.getDef5() != null) {
			stmt.setString(++index, condCardVO.getDef5());
		}

		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			CardVO card = new CardVO();
			//
			String pk_lccard = rs.getString(1);
			card.setPk_lccard(pk_lccard == null ? null : pk_lccard.trim());
			//
			String lccode = rs.getString(2);
			card.setLccode(lccode == null ? null : lccode.trim());
			//
			String lcname = rs.getString(3);
			card.setLcname(lcname == null ? null : lcname.trim());
			//
			String pk_lctype = rs.getString(4);
			card.setPk_lctype(pk_lctype == null ? null : pk_lctype.trim());
			//
			String pk_managedept = rs.getString(5);
			card.setPk_managedept(pk_managedept == null ? null : pk_managedept.trim());
			//
			String pk_usedept = rs.getString(6);
			card.setPk_usedept(pk_usedept == null ? null : pk_usedept.trim());
			//
			String tallyflag = rs.getString(7);
			card.setTallyflag(tallyflag == null ? null : new UFBoolean(tallyflag.trim()));
			//
			String cancelflag = rs.getString(8);
			card.setCancelflag(cancelflag == null ? null : new UFBoolean(cancelflag.trim()));
			//
			String buydate = rs.getString(9);
			card.setBuydate(buydate == null ? null : new UFDate(buydate.trim()));
			//
			String adddate = rs.getString(10);
			card.setAdddate(adddate == null ? null : new UFDate(adddate.trim()));
			//
			String tallydate = rs.getString(11);
			card.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			//
			String canceldate = rs.getString(12);
			card.setCanceldate(canceldate == null ? null : new UFDate(canceldate.trim()));
			//
			BigDecimal price = (BigDecimal)rs.getObject(13);
			card.setPrice(price == null ? null : new UFDouble(price));
			//
			BigDecimal number = (BigDecimal)rs.getObject(14);
			card.setNumber(number == null ? null : new UFDouble(number));
			//
			String remark = rs.getString(15);
			card.setRemark(remark == null ? null : remark.trim());
			//
			String def1 = rs.getString(16);
			card.setDef1(def1 == null ? null : def1.trim());
			//
			String def2 = rs.getString(17);
			card.setDef2(def2 == null ? null : def2.trim());
			//
			String def3 = rs.getString(18);
			card.setDef3(def3 == null ? null : def3.trim());
			//
			String def4 = rs.getString(19);
			card.setDef4(def4 == null ? null : def4.trim());
			//
			String def5 = rs.getString(20);
			card.setDef5(def5 == null ? null : def5.trim());

			v.addElement(card);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	cards = new CardVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(cards);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.card.CardDMO", "queryByVO", new Object[]{condCardVO, isAnd});
	/*************************************************************/

	return cards;
}

public CardVO [] queryByCondVO(CardVO condVO) throws SQLException {
	Connection con = null;
	PreparedStatement stmt = null;	
	
	CardVO cards[] = null;
	Vector v = new Vector();
	try {
		con = getConnection();
		//拼接sql，实现条件查询
		String sql = null;
		if(isDB2(con)){
		    sql = "select a.pk_lccard,a.lccode,a.lcname,a.pk_lctype,a.pk_managedept,a.pk_usedept,a.tallyflag,a.cancelflag,a.buydate,a.adddate,a.tallydate,a.canceldate,a.price,a.number,a.remark,a.def1,a.def2,a.def3,a.def4,a.def5 from lc_card a,bd_deptdoc b where 1=1 and a.pk_usedept=b.pk_deptdoc and b.pk_corp = '"+condVO.getPk_corp()+"' ";
		} else {
		    sql = "select a.pk_lccard,a.lccode,a.lcname,a.pk_lctype,a.pk_managedept,a.pk_usedept,a.tallyflag,a.cancelflag,a.buydate,a.adddate,a.tallydate,a.canceldate,a.price,a.\"number\",a.remark,a.def1,a.def2,a.def3,a.def4,a.def5 from lc_card a,bd_deptdoc b where 1=1 and a.pk_usedept=b.pk_deptdoc and b.pk_corp = '"+condVO.getPk_corp()+"' ";
		}
		if(condVO.getLccode()!=null&&condVO.getLccode().length()>0)
			sql += " and a.lccode like '" + condVO.getLccode() + "' ";
		else{
		if(condVO.getPk_corp()!=null&&condVO.getPk_corp().length()>0){
		    sql += " and b.pk_corp='" + condVO.getPk_corp() + "' ";
		}
		//管理部门
		if(condVO.getPk_managedept()!=null){
		    sql += " and pk_managedept='" + condVO.getPk_managedept() + "' ";
		}else{
			String isUseManageDept = LCTools.getParam(null,"LC20");
			if((isUseManageDept!=null)&&(!isUseManageDept.equals(""))&&(isUseManageDept.equals("Y")))//启用了管理部门
			{
			if(isControl(condVO.getPk_corp(),"bd_deptdoc_物品管理部门"))//权限控制了
			{
			    Vector man_v = new Vector();
				man_v = getControlPks(condVO.getPk_corp(),condVO.getLoginuser(),"bd_deptdoc_物品管理部门")	;
				if((man_v!=null)&&(man_v.size()>0))
				{
				  String tmp = "";
				  for(int i=0;i<man_v.size();i++)
				  {
				     tmp = tmp + "'"+man_v.get(i).toString().trim()+"'";
				     if(i<man_v.size()-1)
				     {
				     tmp = tmp + ",";	
				     }
				  }
				sql += " and  pk_managedept in ("+tmp+") ";
				}
			}
			}
		}
		//使用部门
		if(condVO.getPk_usedept()!=null){
		    if(!condVO.getInclusub())
		    {
			 sql += " and pk_usedept='" + condVO.getPk_usedept() + "' ";
		    }else{
		    	try{
		    	 DeptdocBO deptbo = new DeptdocBO();
		    	 DeptdocVO[] deptvos = deptbo.queryAllchildern(condVO.getPk_usedept());
		    	 if((deptvos == null)||(deptvos.length<=0))//没找到下级，查本级
		    	 {
		    	  sql += " and pk_usedept='" + condVO.getPk_usedept() + "' ";	
		    	 }else{//找到下级
		    	   String tmp = "";
		    	 	for(int i=0; i<deptvos.length; i++)
		    	   {
		    	   	  tmp = tmp + "'"+deptvos[i].getPk_deptdoc()+"'";
		    	   	  if(i<deptvos.length-1)
		    	   	  {
		    	   	  tmp = tmp + ",";	
		    	   	  }
		    	   }
		    	 	sql += " and pk_usedept in ('" + condVO.getPk_usedept() + "',"+tmp+" ) ";
		    	 }
		    	}catch(Exception e)
				{
		    	  System.out.println("找下级部门发生异常");
				}
		    }
		}else{

			if(isControl(condVO.getPk_corp(),"bd_deptdoc_物品使用部门"))//权限控制了
			{
			    Vector use_v = new Vector();
			    use_v = getControlPks(condVO.getPk_corp(),condVO.getLoginuser(),"bd_deptdoc_物品使用部门")	;
				if((use_v!=null)&&(use_v.size()>0))
				{
				  String tmp = "";
				  for(int i=0;i<use_v.size();i++)
				  {
				     tmp = tmp + "'"+use_v.get(i).toString().trim()+"'";
				     if(i<use_v.size()-1)
				     {
				     tmp = tmp + ",";	
				     }
				  }
				sql += " and  pk_usedept in ("+tmp+") ";
				}
			}
		
		}

		//物品类别
		if(condVO.getPk_lctype()!=null){
		    String lctypecode = null;
		    try {
		        TypeVO vo = (new TypeDMO()).findByPrimaryKey(condVO.getPk_lctype());
		        lctypecode = vo.getLctypecode();
		    } catch (Exception e){
		        e.printStackTrace();
		    }
		    sql += " and pk_lctype in (select pk_lctype from lc_type where lctypecode like '" + lctypecode + "%')  ";
		}else{
            if(isControl(condVO.getPk_corp(),"lc_type_低值易耗品类别"))//权限控制了
			{
			    Vector type_v = new Vector();
			    type_v = getControlPks(condVO.getPk_corp(),condVO.getLoginuser(),"lc_type_低值易耗品类别");
				if((type_v!=null)&&(type_v.size()>0))
				{
				  String tmp = "";
				  for(int i=0;i<type_v.size();i++)
				  {
				     tmp = tmp + "'"+type_v.get(i).toString().trim()+"'";
				     if(i<type_v.size()-1)
				     {
				     tmp = tmp + ",";	
				     }
				  }
				sql += " and  pk_lctype in ("+tmp+") ";
				}
			}		
		}
		//物品单价
		if(condVO.getPricestart() != null && condVO.getPricestart().toString().length()>0){
			sql += "and a.price=" + condVO.getPricestart() + " ";
		}
		//物品数量
		if(condVO.getAmountstart()!=null && condVO.getAmountstart().toString().length()>0){	
			
			if(isDB2(con)){
				sql += "and a.number=" + condVO.getAmountstart().toString() + " ";
			} else {
				sql += "and a.\"number\"=" + condVO.getAmountstart().toString() + " ";	
			}
		}
		//加入时间
		if((condVO.getAdddate() != null && !condVO.getAdddate().toString().equals(""))
				||(condVO.getAddDateEnd()!=null&&condVO.getAddDateEnd().toString().length()>0)){
			if(condVO.getAddDateEnd()==null||condVO.getAddDateEnd().toString().length()<=0)
				sql += "and a.adddate>= '" + condVO.getAdddate().toString() + "' ";
			else if(condVO.getAdddate() == null || condVO.getAdddate().toString().length()<=0)
				sql += "and a.adddate<= '" + condVO.getAddDateEnd().toString() + "' ";
			else
				sql += "and a.adddate>= '" + condVO.getAdddate().toString() + "' and a.adddate<= '" + condVO.getAddDateEnd().toString() + "' ";
		}
		//购买时间
		if((condVO.getBuydate() != null && !condVO.getBuydate().toString().equals(""))
				||(condVO.getBuyDateEnd()!=null&&condVO.getBuyDateEnd().toString().length()>0)){
			if(condVO.getBuyDateEnd()==null||condVO.getBuyDateEnd().toString().length()<=0)
				sql += "and a.buydate>= '" + condVO.getBuydate() + "' ";
			else if(condVO.getBuydate()==null||condVO.getBuydate().toString().length()<=0)
				sql += "and a.buydate<= '" + condVO.getBuyDateEnd() + "' ";
			else
				sql += "and a.buydate>= '" + condVO.getBuydate() + "' and a.buydate<= '" + condVO.getBuyDateEnd() + "' ";
		}
		//销毁时间
		if((condVO.getCanceldate() != null && !condVO.getCanceldate().toString().equals(""))
				||(condVO.getDestroyEnd()!=null&&condVO.getDestroyEnd().toString().length()>0)){
			if(condVO.getDestroyEnd()==null||condVO.getDestroyEnd().toString().length()<=0)
				sql += "and a.canceldate>= '" + condVO.getCanceldate() + "' ";
			else if(condVO.getCanceldate()==null||condVO.getCanceldate().toString().trim().length()<=0)
				sql += "and a.canceldate<= '" + condVO.getDestroyEnd() + "' ";
			else
				sql += "and a.canceldate>= '" + condVO.getCanceldate() + "' and a.canceldate<= '" + condVO.getDestroyEnd() + "' ";
		}
		//备注
		if(condVO.getRemark() != null && !condVO.getRemark().toString().equals(""))
			sql += "and a.remark like '%" + condVO.getRemark() + "%' ";
		//金额
		if((condVO.getTotalpricestart()!=null&&condVO.getTotalpricestart().length()>0) || 
				(condVO.getTotalpriceend()!=null&&condVO.getTotalpriceend().length()>0)){
			if(condVO.getTotalpriceend()==null||condVO.getTotalpriceend().length()<=0){
				if(isDB2(con)){
					sql += "and (a.number*a.price) >=" + condVO.getTotalpricestart() + " ";
				} else {
					sql += "and (a.\"number\"*a.price) >=" + condVO.getTotalpricestart() + " ";
				}
			}
			else if(condVO.getTotalpricestart()==null||condVO.getTotalpricestart().length()<=0){
				if(isDB2(con)){
					sql += "and (a.number*a.price) <=" + condVO.getTotalpriceend() + " ";
				} else {
					sql += "and (a.\"number\"*a.price) <=" + condVO.getTotalpriceend() + " ";
				}
			}
				
			else{
				if(isDB2(con)){
					sql += "and (a.number*a.price) between " + condVO.getTotalpricestart() + " and " +
						condVO.getTotalpriceend() + " ";
				} else {
					sql += "and (a.\"number\"*a.price) between " + condVO.getTotalpricestart() + " and " +
						condVO.getTotalpriceend() + " ";
				}
				
				
			}
		}
		//使用人
		if(condVO.getDef1()!=null&&condVO.getDef1().length()>0)
			sql += "and a.def1 like '" + condVO.getDef1() + "' ";
		
		//录入人
		if(condVO.getDef3()!=null&&condVO.getDef3().length()>0)
			sql += "and a.def3 like '" + condVO.getDef3() + "' ";
		
		if(condVO.getM_status()!=null && (!condVO.getM_status().equals(""))) {
		    
		    if(condVO.getM_status().equals("未记账")){
		        sql += " and (tallyflag='N' or tallyflag is null) ";
		    }
		    if(condVO.getM_status().equals("已记账")){
		        sql += " and tallyflag='Y' and (cancelflag='N' or cancelflag is null) ";
		    }
		    if(condVO.getM_status().equals("已核销")){
		        sql += " and cancelflag='Y' ";
		    }
		}
		}
		sql += " order by a.lccode";
		
		stmt = con.prepareStatement(sql);

		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			CardVO card = new CardVO();
			// pk_lccard :
			String pk_lccard = rs.getString(1);
			card.setPk_lccard(pk_lccard == null ? null : pk_lccard.trim());
			// lccode :
			String lccode = rs.getString(2);
			card.setLccode(lccode == null ? null : lccode.trim());
			// lcname :
			String lcname = rs.getString(3);
			card.setLcname(lcname == null ? null : lcname.trim());
			// pk_lctype :
			String pk_lctype = rs.getString(4);
			card.setPk_lctype(pk_lctype == null ? null : pk_lctype.trim());
			// pk_managedept :
			String pk_managedept = rs.getString(5);
			card.setPk_managedept(pk_managedept == null ? null : pk_managedept.trim());
			// pk_usedept :
			String pk_usedept = rs.getString(6);
			card.setPk_usedept(pk_usedept == null ? null : pk_usedept.trim());
			// tallyflag :
			String tallyflag = rs.getString(7);
			card.setTallyflag(tallyflag == null ? new UFBoolean(false) : new UFBoolean(tallyflag.trim()));
			// cancelflag :
			String cancelflag = rs.getString(8);
			card.setCancelflag(cancelflag == null ? new UFBoolean(false) : new UFBoolean(cancelflag.trim()));
			// buydate :
			String buydate = rs.getString(9);
			card.setBuydate(buydate == null ? null : new UFDate(buydate.trim()));
			// adddate :
			String adddate = rs.getString(10);
			card.setAdddate(adddate == null ? null : new UFDate(adddate.trim()));
			// tallydate :
			String tallydate = rs.getString(11);
			card.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			// canceldate :
			String canceldate = rs.getString(12);
			card.setCanceldate(canceldate == null ? null : new UFDate(canceldate.trim()));
			// price :
			BigDecimal price = (BigDecimal)rs.getObject(13);
			card.setPrice(price == null ? null : new UFDouble(price));
			// number :
			BigDecimal number = (BigDecimal)rs.getObject(14);
			card.setNumber(number == null ? null : new UFDouble(number));
			// remark :
			String remark = rs.getString(15);
			card.setRemark(remark == null ? null : remark.trim());
			// def1 :
			String def1 = rs.getString(16);
			card.setDef1(def1 == null ? null : def1.trim());
			// def2 :
			String def2 = rs.getString(17);
			card.setDef2(def2 == null ? null : def2.trim());
			// def3 :
			String def3 = rs.getString(18);
			card.setDef3(def3 == null ? null : def3.trim());
			// def4 :
			String def4 = rs.getString(19);
			card.setDef4(def4 == null ? null : def4.trim());
			// def5 :
			String def5 = rs.getString(20);
			card.setDef5(def5 == null ? null : def5.trim());

			/*PreparedStatement stmt0 = con.prepareStatement("Select lctypename from lc_type where pk_lctype like '"+pk_lctype+"'");
			ResultSet rs0 = stmt0.executeQuery();
			if(rs0.next())
				card.setType(rs0.getString(1));
			stmt0.close();
			
			stmt0 = con.prepareStatement("Select deptname from bd_deptdoc where pk_deptdoc like '"+pk_managedept+"'");
			ResultSet rs1 = stmt0.executeQuery();
			if(rs1.next())
				card.dep = rs1.getString(1);
			stmt0.close();
			
			stmt0 = con.prepareStatement("Select user_name from sm_user where cuserid like '" + def1 + "'");
			ResultSet rs2 = stmt0.executeQuery();
			if(rs2.next())
				card.setUser(rs2.getString(1));
			stmt0.close();
			*/
			v.addElement(card);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}		
	}
	cards = new CardVO[v.size()];
	if (v.size() > 0) {	
	    v.copyInto(cards);
	}
	return cards;
}

public Vector getControlPks(String corp,String user,String objname){
	Connection con = null;
	PreparedStatement stmt = null;
	String tablen = "bd_datapowerbd"+corp;
	String sql = " select pk_bd from "+tablen+" d,sm_user_rela u where u.userid ='"+user+"' and d.groupid = u.groupid " +
			" and d.tablename = '"+objname+"' ";
	Vector vv = new Vector();
	try{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		
		while(rs.next()){
			String contpk = rs.getString(1);
			if(contpk!=null)
			 vv.addElement(contpk.trim());
		}
	}catch(Exception e)
	{
	}
	finally {
		try {
				if (stmt != null) {
					stmt.close();
				}
			}catch (Exception e) {}
			try {
				if (con != null) {
					con.close();
				}
			}catch (Exception e) {}		
		} 
	if (vv.size() > 0) {
	    return vv;
	}
	return null;
}


public boolean isControl(String corp,String objname){
	boolean flag = false;
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = " select iscontrol from bd_datapowerused where pk_corp = '"+corp+"' and tablename = '"+objname+"'";
	try{
		
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		while(rs.next()){
			if(rs.getString(1).equals("Y"))
				return true;
		}
	}catch(Exception e){
		System.out.println("查找权限出错");
	}
	finally {
	try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}		
	}    
	return flag;
}

public void checkCardCode(String cardCode, String pk_card) throws SQLException {
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = "select 1 from lc_card where lccode = ? ";
	String sqlparam  = "select value from v_pub_sysinit where initcode = 'LC01' and pk_corp = '0001'";
	if(pk_card!=null){
	    sql += " and pk_lccard <> ?";
	}
	
	try {
		con = getConnection();
		stmt = con.prepareStatement(sqlparam);
		ResultSet rsp = stmt.executeQuery();
		if(rsp.next()){
		    int pLength = rsp.getInt(1);
		    if(cardCode==null){
		        throw new SQLException("编码不能为空");
		    } else {
		        if(cardCode.trim().length()!=pLength){
		            throw new SQLException("编码长度应为" + pLength + "位");
		        }
		    }
		} else {
		    System.out.println("低值易耗品管理错误：未找到编码长度参数");
		}
		
		
		stmt = con.prepareStatement(sql);
		stmt.setString(1,cardCode);
		if(pk_card!=null){
		    stmt.setString(2,pk_card);
		}
		ResultSet rs = stmt.executeQuery();
		if(rs.next()){
		    throw new SQLException("物品编码已经存在");
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}		
	}    
}



public CardVO [] queryByWhereSqlAndWithUseDept(String whereSql) throws SQLException {
	String sql = "";
	String sqldb2 = "";
    if(whereSql==null){
        sql = "select pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, \"number\", remark, def1, def2, def3, def4, def5 from lc_card";
        sqldb2 ="select pk_lccard, lccode, lcname, pk_lctype, pk_managedept, pk_usedept, tallyflag, cancelflag, buydate, adddate, tallydate, canceldate, price, number, remark, def1, def2, def3, def4, def5 from lc_card";
    } else {
        sql = "select a.pk_lccard, a.lccode, a.lcname, a.pk_lctype, a.pk_managedept, a.pk_usedept, a.tallyflag, a.cancelflag, a.buydate, a.adddate, a.tallydate, a.canceldate, a.price, a.\"number\", a.remark, a.def1, a.def2, a.def3, a.def4, a.def5 from lc_card a,bd_deptdoc b where a.pk_usedept=b.pk_deptdoc and " + whereSql;
        sqldb2 ="select a.pk_lccard, a.lccode, a.lcname, a.pk_lctype, a.pk_managedept, a.pk_usedept, a.tallyflag, a.cancelflag, a.buydate, a.adddate, a.tallydate, a.canceldate, a.price, a.number, a.remark, a.def1, a.def2, a.def3, a.def4, a.def5 from lc_card a,bd_deptdoc b where a.pk_usedept=b.pk_deptdoc and " + whereSql;
    }
    
    sqldb2 = sqldb2.replaceAll("\\\""," ");
    
    sql += " order by a.lccode ";
    sqldb2 += " order by a.lccode ";
	CardVO cards[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		if(isDB2(con)){
		    stmt = con.prepareStatement(sqldb2);
		} else {
		    stmt = con.prepareStatement(sql);
		}
		
		
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			CardVO card = new CardVO();
			// pk_lccard :
			String pk_lccard = rs.getString(1);
			card.setPk_lccard(pk_lccard == null ? null : pk_lccard.trim());
			// lccode :
			String lccode = rs.getString(2);
			card.setLccode(lccode == null ? null : lccode.trim());
			// lcname :
			String lcname = rs.getString(3);
			card.setLcname(lcname == null ? null : lcname.trim());
			// pk_lctype :
			String pk_lctype = rs.getString(4);
			card.setPk_lctype(pk_lctype == null ? null : pk_lctype.trim());
			// pk_managedept :
			String pk_managedept = rs.getString(5);
			card.setPk_managedept(pk_managedept == null ? null : pk_managedept.trim());
			// pk_usedept :
			String pk_usedept = rs.getString(6);
			card.setPk_usedept(pk_usedept == null ? null : pk_usedept.trim());
			// tallyflag :
			String tallyflag = rs.getString(7);
			card.setTallyflag(tallyflag == null ? new UFBoolean(false) : new UFBoolean(tallyflag.trim()));
			// cancelflag :
			String cancelflag = rs.getString(8);
			card.setCancelflag(cancelflag == null ? new UFBoolean(false) : new UFBoolean(cancelflag.trim()));
			// buydate :
			String buydate = rs.getString(9);
			card.setBuydate(buydate == null ? null : new UFDate(buydate.trim()));
			// adddate :
			String adddate = rs.getString(10);
			card.setAdddate(adddate == null ? null : new UFDate(adddate.trim()));
			// tallydate :
			String tallydate = rs.getString(11);
			card.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			// canceldate :
			String canceldate = rs.getString(12);
			card.setCanceldate(canceldate == null ? null : new UFDate(canceldate.trim()));
			// price :
			BigDecimal price = (BigDecimal)rs.getObject(13);
			card.setPrice(price == null ? null : new UFDouble(price));
			// number :
			BigDecimal number = (BigDecimal)rs.getObject(14);
			card.setNumber(number == null ? null : new UFDouble(number));
			// remark :
			String remark = rs.getString(15);
			card.setRemark(remark == null ? null : remark.trim());
			// def1 :
			String def1 = rs.getString(16);
			card.setDef1(def1 == null ? null : def1.trim());
			// def2 :
			String def2 = rs.getString(17);
			card.setDef2(def2 == null ? null : def2.trim());
			// def3 :
			String def3 = rs.getString(18);
			card.setDef3(def3 == null ? null : def3.trim());
			// def4 :
			String def4 = rs.getString(19);
			card.setDef4(def4 == null ? null : def4.trim());
			// def5 :
			String def5 = rs.getString(20);
			card.setDef5(def5 == null ? null : def5.trim());

			v.addElement(card);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	cards = new CardVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(cards);
	}

	return cards;
}

public void UpdateCancelFlag(String pk_cards,String canceldate,String flag) throws SQLException {
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = null;
	if(flag.equals("N")){
	    sql = "update lc_card set cancelflag = null,canceldate = null where pk_lccard in (" + pk_cards + ") " ;
	} else {
	    sql = "update lc_card set cancelflag = '" + flag +"',canceldate = '" + canceldate + "' where pk_lccard in (" + pk_cards + ") " ;
	}
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}		
	}
}
public void UpdateUseDept(String pk_card,String pk_usedept) throws SQLException {
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = "update lc_card set pk_usedept = '" + pk_usedept  + "' where pk_lccard='" + pk_card + "' " ;
	
	//sql = "update lc_card set pk_usedept = '" + pk_usedept  + "',tallydate='"+ checkDate+"' where pk_lccard='" + pk_card + "' " ;
	//北农商改动
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}		
	}    
}

public void UpdateUser(String pk_card, String def1) throws SQLException{
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = "update lc_card set def1 = '" + def1 + "' where pk_lccard='" + pk_card + "' ";
	
	try{
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.executeUpdate();
	}finally{
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}		
	}
}

public boolean isDB2 (Connection con) throws SQLException {
    try {
	    UFConnection ufcon = (UFConnection)con;
	    if(ufcon.getDatabaseType()==UFConnection.DB2){
	        return true;
	    }
    } catch(Exception e){
        throw new SQLException(e.getMessage());
    }
    return false;
}

public String getLcCode(String prefix) throws SQLException {
    
    String strCodeLen = LCTools.getParam(null,"LC12"); //物品编码序列号位数
    if(strCodeLen==null){
        throw new SQLException("请设置物品编码序列号位数");
    }
    int nCodeLen = 0;
    try {
        nCodeLen = Integer.parseInt(strCodeLen);
    } catch (Exception e){
        e.printStackTrace();
        throw new SQLException ("编码序列号位数不为数字："+e.getMessage());
    }
    
    String num = getRepeatStr(nCodeLen-1,"0")+"1";
    String lcCode = prefix + num;
    String indexchar = getRepeatStr(nCodeLen,"_");
    
    Connection con = null;
    PreparedStatement stmt = null;
    //String sql = "select max(lccode) from lc_card where pk_usedept in (select pk_deptdoc from bd_deptdoc where pk_corp in (select pk_corp from bd_corp where unitcode = ?) )";
    
    String sql = "select max(lccode) from lc_card where lccode like '" + prefix + indexchar + "' and pk_usedept in (select pk_deptdoc from bd_deptdoc where pk_corp = '" + "0121" + "')";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        
        ResultSet rs = stmt.executeQuery();
        
        if(rs.next()){
            String maxLcCode = rs.getString(1);
            if(maxLcCode!=null&&maxLcCode.trim().length()>0){
                BigDecimal nCode = new BigDecimal(maxLcCode);
                nCode = nCode.add(new BigDecimal(1));
                lcCode = getField(nCode.toString(),maxLcCode.length());
            }
        } else {
            
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return lcCode;
}

public String getLcCode(String prefix,String pk_corp) throws SQLException {
    
    String strCodeLen = LCTools.getParam(null,"LC12"); //物品编码序列号位数
    if(strCodeLen==null){
        throw new SQLException("请设置物品编码序列号位数");
    }
    int nCodeLen = 0;
    try {
        nCodeLen = Integer.parseInt(strCodeLen);
    } catch (Exception e){
        e.printStackTrace();
        throw new SQLException ("编码序列号位数不为数字："+e.getMessage());
    }
    
    String num = getRepeatStr(nCodeLen-1,"0")+"1";
    String lcCode = prefix + num;
    String indexchar = getRepeatStr(nCodeLen,"_");
    
    Connection con = null;
    PreparedStatement stmt = null;
    //String sql = "select max(lccode) from lc_card where pk_usedept in (select pk_deptdoc from bd_deptdoc where pk_corp in (select pk_corp from bd_corp where unitcode = ?) )";
    
    String sql = "select max(lccode) from lc_card where lccode like '" + prefix + indexchar + "' and pk_usedept in (select pk_deptdoc from bd_deptdoc where pk_corp = '" + pk_corp + "')";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        
        ResultSet rs = stmt.executeQuery();
        
        if(rs.next()){
            String maxLcCode = rs.getString(1);
            if(maxLcCode!=null&&maxLcCode.trim().length()>0) {
                BigDecimal nCode = new BigDecimal(maxLcCode);
                nCode = nCode.add(new BigDecimal(1.0d));
                lcCode = getField(nCode.toString(),maxLcCode.length());
            }
        } else {
            
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return lcCode;
}

public String getDeptPkByCode(String unitCode,String deptCode) throws SQLException {
    String pk_deptdoc = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "select pk_deptdoc from bd_deptdoc where (pk_corp in (select pk_corp from bd_corp where unitcode = ?) ) and deptcode = ?";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        stmt.setString(1,unitCode);
        stmt.setString(2,deptCode);
        
        ResultSet rs = stmt.executeQuery();
        if(rs.next()){
            pk_deptdoc = rs.getString(1);
        } else {
            throw new SQLException ("查询部门编码出错！公司编码[" + unitCode + "]部门编码[" + deptCode + "]");
        }
        
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return pk_deptdoc;
}

public String getLcTypePkByCode (String TypeCode) throws SQLException {
    String pk_lctype = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "select pk_lctype from lc_type where lctypecode = ?";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        stmt.setString(1,TypeCode);
        ResultSet rs = stmt.executeQuery();
        if(rs.next()){
            pk_lctype = rs.getString(1);
        } else {
            throw new SQLException ("查询卡片类别出错！类别号[" + TypeCode + "]");
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return pk_lctype;
}

public String getField(String str,int len) throws SQLException{
    return getRepeatStr(len-str.getBytes().length,"0") + str;
}

protected String getRepeatStr(int n,String str) throws SQLException{
    String RepeatStr = "";
    if(n<0){
        throw new SQLException ("报文字段大于规定长度");
    }
    for (int i = 0; i < n; i++) {
        RepeatStr += str;
    }
    return RepeatStr;
}

public String getPsndocPkByCode(String unitCode,String psncode) throws SQLException {
    String pk_psndoc = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "select pk_psndoc from bd_psndoc where (pk_corp in (select pk_corp from bd_corp where unitcode=?)) and psncode = ?";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        stmt.setString(1,unitCode);
        stmt.setString(2,psncode);
        ResultSet rs = stmt.executeQuery();
        if(rs.next()){
            pk_psndoc = rs.getString(1);
        } else {
            pk_psndoc = null;
            //throw new SQLException ("查找使用人档案失败！公司编码[" + unitCode + "]人员编码[" + psncode + "]" );
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return pk_psndoc;
}

public String queryUnitCodeByDept(String pk_deptdoc) throws SQLException {
    String unitCode = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "select unitcode from bd_corp where pk_corp in (select pk_corp from bd_deptdoc where pk_deptdoc = '" + pk_deptdoc + "')";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        if(rs.next()){
            unitCode = rs.getString(1);
        } else {
            throw new SQLException ("由部门查找公司编码失败");
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return unitCode;
}

public String queryPkCorpByDept(String pk_deptdoc) throws SQLException {
    String pk_corp = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "select pk_corp from bd_corp where pk_corp in (select pk_corp from bd_deptdoc where pk_deptdoc = '" + pk_deptdoc + "')";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        if(rs.next()){
            pk_corp = rs.getString(1);
        } else {
            throw new SQLException ("由部门查找公司主键失败");
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return pk_corp;
}
public void check(CardVO [] vos,String pk_checker) throws SQLException {
    Connection con = null;
    PreparedStatement stmt = null;
    String pk_cards = null;
    if(vos!=null&&vos.length>0){
        pk_cards = "";
        for (int i = 0; i < vos.length; i++) {
            pk_cards += "'" + vos[i].getPk_lccard() + "'";
            if(i!=(vos.length-1)){
                pk_cards += ",";
            }
        }
    }
    String sql = "update lc_card set def2 = ";
    if(pk_checker==null){
        sql += "null ";
    } else {
        sql += "'" + pk_checker + "' ";
    }
    sql += " where 1<>1 ";
        
    if(pk_cards!=null){
        sql += " or pk_lccard in (" + pk_cards + ") ";
    }
    
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        stmt.executeUpdate();
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
}

public String getLctypecodeByPk(String pk_lctype) throws SQLException {
    String lctypecode = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "select lctypecode from lc_type where pk_lctype = '" + pk_lctype + "'";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        if(rs.next()){
            lctypecode = rs.getString(1);
        } else {
            throw new SQLException("由物品类别主键查找物品类别编码出错");
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return lctypecode;
}
}
