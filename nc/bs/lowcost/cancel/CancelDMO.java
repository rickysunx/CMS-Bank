/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.lowcost.cancel;

import java.sql.*;
import java.util.*;
import nc.bs.pub.*;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
import nc.vo.lowcost.cancel.*;
/**
 * Cancel的DMO类。
 *
 * 创建日期：(2005-10-7)
 * @author：
 */
public class CancelDMO extends DataManageObject {
/**
 * CancelDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public CancelDMO() throws javax.naming.NamingException, SystemException {
	super();
}
/**
 * CancelDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public CancelDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}
/**
 * <p>根据表头的主键查询一个VO。
 * <p>
 * 创建日期：(2005-10-7)
 * @param key ??dbFieldType??
 * @exception java.sql.SQLException 异常说明。
 */
public CancelVO findByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	CancelVO vo = new CancelVO();
	//
	CancelHeaderVO header = findHeaderByPrimaryKey(key);
	CancelItemVO[] items = null;
	if (header != null) {
		items = findItemsForHeader(header.getPrimaryKey());
	}
	//
	vo.setParentVO(header);
	vo.setChildrenVO(items);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return vo;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2005-10-7)
 * @return nc.vo.lowcost.cancel.CancelHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public CancelHeaderVO findHeaderByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "findHeaderByPrimaryKey", new Object[]{key});
	/*************************************************************/

	String sql = "select cancelcode, cancelreason, pk_maker, makedate, pk_checker, checkdate, checkflag, tallyflag, tallydate, def1, def2, def3, def4, def5 from lc_cancel where pk_cancel = ?";

	CancelHeaderVO cancelHeader = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			cancelHeader = new CancelHeaderVO(key);
			// cancelcode :
			String cancelcode = rs.getString(1);
			cancelHeader.setCancelcode(cancelcode == null ? null : cancelcode.trim());
			// cancelreason :
			String cancelreason = rs.getString(2);
			cancelHeader.setCancelreason(cancelreason == null ? null : cancelreason.trim());
			// pk_maker :
			String pk_maker = rs.getString(3);
			cancelHeader.setPk_maker(pk_maker == null ? null : pk_maker.trim());
			// makedate :
			String makedate = rs.getString(4);
			cancelHeader.setMakedate(makedate == null ? null : new UFDate(makedate.trim()));
			// pk_checker :
			String pk_checker = rs.getString(5);
			cancelHeader.setPk_checker(pk_checker == null ? null : pk_checker.trim());
			// checkdate :
			String checkdate = rs.getString(6);
			cancelHeader.setCheckdate(checkdate == null ? null : new UFDate(checkdate.trim()));
			// checkflag :
			String checkflag = rs.getString(7);
			cancelHeader.setCheckflag(checkflag == null ? null : new UFBoolean(checkflag.trim()));
			// tallyflag :
			String tallyflag = rs.getString(8);
			cancelHeader.setTallyflag(tallyflag == null ? null : new UFBoolean(tallyflag.trim()));
			// tallydate :
			String tallydate = rs.getString(9);
			cancelHeader.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			// def1 :
			String def1 = rs.getString(10);
			cancelHeader.setDef1(def1 == null ? null : def1.trim());
			// def2 :
			String def2 = rs.getString(11);
			cancelHeader.setDef2(def2 == null ? null : def2.trim());
			// def3 :
			String def3 = rs.getString(12);
			cancelHeader.setDef3(def3 == null ? null : def3.trim());
			// def4 :
			String def4 = rs.getString(13);
			cancelHeader.setDef4(def4 == null ? null : def4.trim());
			// def5 :
			String def5 = rs.getString(14);
			cancelHeader.setDef5(def5 == null ? null : def5.trim());
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "findHeaderByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return cancelHeader;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2005-10-7)
 * @return nc.vo.lowcost.cancel.CancelItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public CancelItemVO findItemByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "findItemByPrimaryKey", new Object[]{key});
	/*************************************************************/

	String sql = "select pk_cancel, def2, def1, pk_lccard, def3, def4, def5 from lc_cancel_m where pk_cancel_m = ?";

	CancelItemVO cancelItem = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			cancelItem = new CancelItemVO(key);
			// pk_cancel :
			String pk_cancel = rs.getString(1);
			cancelItem.setPk_cancel(pk_cancel == null ? null : pk_cancel.trim());
			// def2 :
			String def2 = rs.getString(2);
			cancelItem.setDef2(def2 == null ? null : def2.trim());
			// def1 :
			String def1 = rs.getString(3);
			cancelItem.setDef1(def1 == null ? null : def1.trim());
			// pk_lccard :
			String pk_lccard = rs.getString(4);
			cancelItem.setPk_lccard(pk_lccard == null ? null : pk_lccard.trim());
			// def3 :
			String def3 = rs.getString(5);
			cancelItem.setDef3(def3 == null ? null : def3.trim());
			// def4 :
			String def4 = rs.getString(6);
			cancelItem.setDef4(def4 == null ? null : def4.trim());
			// def5 :
			String def5 = rs.getString(7);
			cancelItem.setDef5(def5 == null ? null : def5.trim());
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "findItemByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return cancelItem;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2005-10-7)
 * @return nc.vo.lowcost.cancel.CancelItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public CancelItemVO[] findItemsForHeader(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "findItemsForHeader", new Object[]{key});
	/*************************************************************/

	String sql = "select pk_cancel_m, pk_cancel, def2, def1, pk_lccard, def3, def4, def5 from lc_cancel_m where pk_cancel = ?";

	CancelItemVO[] cancelItems = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			CancelItemVO cancelItem = new CancelItemVO();
			//
			String pk_cancel_m = rs.getString("pk_cancel_m");
			cancelItem.setPk_cancel_m(pk_cancel_m == null ? null : pk_cancel_m.trim());
			//
			String pk_cancel = rs.getString("pk_cancel");
			cancelItem.setPk_cancel(pk_cancel == null ? null : pk_cancel.trim());
			//
			String def2 = rs.getString("def2");
			cancelItem.setDef2(def2 == null ? null : def2.trim());
			//
			String def1 = rs.getString("def1");
			cancelItem.setDef1(def1 == null ? null : def1.trim());
			//
			String pk_lccard = rs.getString("pk_lccard");
			cancelItem.setPk_lccard(pk_lccard == null ? null : pk_lccard.trim());
			//
			String def3 = rs.getString("def3");
			cancelItem.setDef3(def3 == null ? null : def3.trim());
			//
			String def4 = rs.getString("def4");
			cancelItem.setDef4(def4 == null ? null : def4.trim());
			//
			String def5 = rs.getString("def5");
			cancelItem.setDef5(def5 == null ? null : def5.trim());
			v.addElement(cancelItem);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	cancelItems = new CancelItemVO[v.size()];
	if (v.size() > 0){
		v.copyInto(cancelItems);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "findItemsForHeader", new Object[]{key});
	/*************************************************************/

	return cancelItems;
}
/**
 * <p>将VO插入母子表。
 * <p>
 * 创建日期：(2005-10-7)
 * @param vo nc.vo.lowcost.cancel.CancelVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insert(CancelVO vo) throws SQLException, SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "insert", new Object[]{vo});
	/*************************************************************/

	// 插入表头：
	String key = insertHeader((CancelHeaderVO) vo.getParentVO());
	// 插入表体各项：
	CancelItemVO[] items = (CancelItemVO[]) vo.getChildrenVO();
	for ( int i = 0; i < items.length; i++ ) {
		insertItem(items[i], key);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "insert", new Object[]{vo});
	/*************************************************************/

	return key;
}
/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2005-10-7)
 * @param node nc.vo.lowcost.cancel.CancelHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insertHeader(CancelHeaderVO cancelHeader) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "insertHeader", new Object[]{cancelHeader});
	/*************************************************************/

	String sql = "insert into lc_cancel(pk_cancel, cancelcode, cancelreason, pk_maker, makedate, pk_checker, checkdate, checkflag, tallyflag, tallydate, def1, def2, def3, def4, def5) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		key = getOID();
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// set PK fields:
		stmt.setString(1, key);
		// set non PK fields:
		if (cancelHeader.getCancelcode() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, cancelHeader.getCancelcode());
		}
		if (cancelHeader.getCancelreason() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, cancelHeader.getCancelreason());
		}
		if (cancelHeader.getPk_maker() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, cancelHeader.getPk_maker());
		}
		if (cancelHeader.getMakedate() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, cancelHeader.getMakedate().toString());
		}
		if (cancelHeader.getPk_checker() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, cancelHeader.getPk_checker());
		}
		if (cancelHeader.getCheckdate() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, cancelHeader.getCheckdate().toString());
		}
		if (cancelHeader.getCheckflag() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, cancelHeader.getCheckflag().toString());
		}
		if (cancelHeader.getTallyflag() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, cancelHeader.getTallyflag().toString());
		}
		if (cancelHeader.getTallydate() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, cancelHeader.getTallydate().toString());
		}
		if (cancelHeader.getDef1() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, cancelHeader.getDef1());
		}
		if (cancelHeader.getDef2() == null) {
			stmt.setNull(12, Types.CHAR);
		}
		else {
			stmt.setString(12, cancelHeader.getDef2());
		}
		if (cancelHeader.getDef3() == null) {
			stmt.setNull(13, Types.CHAR);
		}
		else {
			stmt.setString(13, cancelHeader.getDef3());
		}
		if (cancelHeader.getDef4() == null) {
			stmt.setNull(14, Types.CHAR);
		}
		else {
			stmt.setString(14, cancelHeader.getDef4());
		}
		if (cancelHeader.getDef5() == null) {
			stmt.setNull(15, Types.CHAR);
		}
		else {
			stmt.setString(15, cancelHeader.getDef5());
		}
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "insertHeader", new Object[]{cancelHeader});
	/*************************************************************/

	return key;
}
/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2005-10-7)
 * @param node nc.vo.lowcost.cancel.CancelItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insertItem(CancelItemVO cancelItem) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "insertItem", new Object[]{cancelItem});
	/*************************************************************/

	String sql = "insert into lc_cancel_m(pk_cancel_m, pk_cancel, def2, def1, pk_lccard, def3, def4, def5) values(?, ?, ?, ?, ?, ?, ?, ?)";

	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		key = getOID();
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// set PK fields:
		stmt.setString(1, key);
		// set non PK fields:
		if (cancelItem.getPk_cancel() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, cancelItem.getPk_cancel());
		}
		if (cancelItem.getDef2() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, cancelItem.getDef2());
		}
		if (cancelItem.getDef1() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, cancelItem.getDef1());
		}
		if (cancelItem.getPk_lccard() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, cancelItem.getPk_lccard());
		}
		if (cancelItem.getDef3() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, cancelItem.getDef3());
		}
		if (cancelItem.getDef4() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, cancelItem.getDef4());
		}
		if (cancelItem.getDef5() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, cancelItem.getDef5());
		}
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "insertItem", new Object[]{cancelItem});
	/*************************************************************/

	return key;
}
/**
 * <p>向数据库插入一个VO对象。
 * <p>
 * 创建日期：(2005-10-7)
 * @param CancelItem nc.vo.lowcost.cancel.CancelItemVO
 * @param foreignKey String
 * @exception java.sql.SQLException 异常说明。
 */
public String insertItem(CancelItemVO cancelItem, String foreignKey) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "insertItem", new Object[]{cancelItem, foreignKey});
	/*************************************************************/

	cancelItem.setPk_cancel(foreignKey);
	String key = insertItem(cancelItem);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "insertItem", new Object[]{cancelItem, foreignKey});
	/*************************************************************/

	return key;
}
/**
 * <p>删除母子表的所有内容。
 * <p>
 * 创建日期：(2005-10-7)
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(CancelVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "delete", new Object[]{vo});
	/*************************************************************/

	deleteItemsForHeader(((CancelHeaderVO)vo.getParentVO()).getPrimaryKey());
	deleteHeader((CancelHeaderVO)vo.getParentVO());

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "delete", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2005-10-7)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteHeader(CancelHeaderVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "deleteHeader", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from lc_cancel where pk_cancel = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "deleteHeader", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2005-10-7)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteItem(CancelItemVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "deleteItem", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from lc_cancel_m where pk_cancel_m = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "deleteItem", new Object[]{vo});
	/*************************************************************/
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2005-10-7)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void deleteItemsForHeader(String headerKey) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "deleteItemsForHeader", new Object[]{headerKey});
	/*************************************************************/

	String sql = "delete from lc_cancel_m where pk_cancel = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, headerKey);
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "deleteItemsForHeader", new Object[]{headerKey});
	/*************************************************************/
}
/**
 * <p>使用VO的值更新母子表。
 * <p>
 * 创建日期：(2005-10-7)
 * @param vo nc.vo.lowcost.cancel.CancelVO
 * @exception java.sql.SQLException 异常说明。
 */
public void update(CancelVO vo) throws SQLException, BusinessException, SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "update", new Object[]{vo});
	/*************************************************************/

	CancelItemVO[] items = (CancelItemVO[]) vo.getChildrenVO();
	for ( int i = 0; i < items.length; i++ ) {
		switch (items[i].getStatus()) {
			case VOStatus.NEW :
				insertItem(items[i]);
				break;
			case VOStatus.UPDATED :
				updateItem(items[i]);
				break;
			case VOStatus.DELETED :
				deleteItem(items[i]);
		}
	}
	updateHeader((CancelHeaderVO) vo.getParentVO());

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "update", new Object[]{vo});
	/*************************************************************/
}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2005-10-7)
 * @param cancelHeader nc.vo.lowcost.cancel.CancelHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateHeader(CancelHeaderVO cancelHeader) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "updateHeader", new Object[]{cancelHeader});
	/*************************************************************/

	String sql = "update lc_cancel set cancelcode = ?, cancelreason = ?, pk_maker = ?, makedate = ?, pk_checker = ?, checkdate = ?, checkflag = ?, tallyflag = ?, tallydate = ?, def1 = ?, def2 = ?, def3 = ?, def4 = ?, def5 = ? where pk_cancel = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (cancelHeader.getCancelcode() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, cancelHeader.getCancelcode());
		}
		if (cancelHeader.getCancelreason() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, cancelHeader.getCancelreason());
		}
		if (cancelHeader.getPk_maker() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, cancelHeader.getPk_maker());
		}
		if (cancelHeader.getMakedate() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, cancelHeader.getMakedate().toString());
		}
		if (cancelHeader.getPk_checker() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, cancelHeader.getPk_checker());
		}
		if (cancelHeader.getCheckdate() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, cancelHeader.getCheckdate().toString());
		}
		if (cancelHeader.getCheckflag() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, cancelHeader.getCheckflag().toString());
		}
		if (cancelHeader.getTallyflag() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, cancelHeader.getTallyflag().toString());
		}
		if (cancelHeader.getTallydate() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, cancelHeader.getTallydate().toString());
		}
		if (cancelHeader.getDef1() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, cancelHeader.getDef1());
		}
		if (cancelHeader.getDef2() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, cancelHeader.getDef2());
		}
		if (cancelHeader.getDef3() == null) {
			stmt.setNull(12, Types.CHAR);
		}
		else {
			stmt.setString(12, cancelHeader.getDef3());
		}
		if (cancelHeader.getDef4() == null) {
			stmt.setNull(13, Types.CHAR);
		}
		else {
			stmt.setString(13, cancelHeader.getDef4());
		}
		if (cancelHeader.getDef5() == null) {
			stmt.setNull(14, Types.CHAR);
		}
		else {
			stmt.setString(14, cancelHeader.getDef5());
		}
		// find record by PK fields:
		stmt.setString(15, cancelHeader.getPrimaryKey());
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "updateHeader", new Object[]{cancelHeader});
	/*************************************************************/
}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2005-10-7)
 * @param cancelItem nc.vo.lowcost.cancel.CancelItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateItem(CancelItemVO cancelItem) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.cancel.CancelDMO", "updateItem", new Object[]{cancelItem});
	/*************************************************************/

	String sql = "update lc_cancel_m set pk_cancel = ?, def2 = ?, def1 = ?, pk_lccard = ?, def3 = ?, def4 = ?, def5 = ? where pk_cancel_m = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (cancelItem.getPk_cancel() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, cancelItem.getPk_cancel());
		}
		if (cancelItem.getDef2() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, cancelItem.getDef2());
		}
		if (cancelItem.getDef1() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, cancelItem.getDef1());
		}
		if (cancelItem.getPk_lccard() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, cancelItem.getPk_lccard());
		}
		if (cancelItem.getDef3() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, cancelItem.getDef3());
		}
		if (cancelItem.getDef4() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, cancelItem.getDef4());
		}
		if (cancelItem.getDef5() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, cancelItem.getDef5());
		}
		// find record by PK fields:
		stmt.setString(8, cancelItem.getPrimaryKey());
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.cancel.CancelDMO", "updateItem", new Object[]{cancelItem});
	/*************************************************************/
}
}