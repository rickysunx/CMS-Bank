/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.lowcost.tally;

import java.util.*;
import java.rmi.*;
import nc.bs.pub.*;
import nc.bs.zjnx.expvoucher.VoucherDealDMO;
import nc.vo.bankinterface.pub.DCTools;
import nc.vo.lowcost.tally.*;
import nc.vo.lowcost.tool.NumFormate;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
/**
 * Tallylog的BO类
 *
 * 创建日期：(2005-10-11)
 * @author：
 */
public class TallylogBO extends BusinessObject {

/**
	 * 
	 */
	private static final long serialVersionUID = 574341135791098348L;

/**
 * TallylogBO 构造子注解。
 */
public TallylogBO() {
	super();
}
/**
 * EJB规范中要求的方法。
 *
 * 创建日期：(2005-10-11)
 */
public void ejbCreate() {}
/**
 * 通过主键获得VO对象。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.lowcost.tally.TallylogVO
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
public TallylogVO findByPrimaryKey(String key) throws java.rmi.RemoteException {

	TallylogVO tallylog = null;
	try {
		TallylogDMO dmo = new TallylogDMO();
		tallylog = dmo.findByPrimaryKey(key);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("TallylogBean::findByPrimaryKey(TallylogPK) Exception!", e);
	}
	return tallylog;
}
/**
 * 向数据库中插入一个VO对象。
 *
 * 创建日期：(2005-10-11)
 * @param tallylog nc.vo.lowcost.tally.TallylogVO
 * @return java.lang.String  所插入VO对象的主键字符串。
 * @exception java.rmi.RemoteException 异常说明。
 */
public String insert(TallylogVO tallylog) throws RemoteException {

	try {
		TallylogDMO dmo = new TallylogDMO();
		String key = dmo.insert(tallylog);
		return key;
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("TallylogBO::insert(TallylogVO) Exception!", e);
	}
}
/**
 * 向数据库中插入一批VO对象。
 *
 * 创建日期：(2005-10-11)
 * @param tallylog nc.vo.lowcost.tally.TallylogVO[]
 * @return java.lang.String[]  所插入VO对象数组的主键字符串数组。
 * @exception java.rmi.RemoteException 异常说明。
 */
public String[] insertArray(TallylogVO[] tallylogs) throws RemoteException {

	try {
		TallylogDMO dmo = new TallylogDMO();
		String[] keys = dmo.insertArray(tallylogs);
		return keys;
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("TallylogBO::insertArray(TallylogVO[]) Exception!", e);
	}
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2005-10-11)
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
public void delete(TallylogVO vo) throws java.rmi.RemoteException {

	try {
		TallylogDMO dmo = new TallylogDMO();
		dmo.delete(vo);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("TallylogBO::delete(TallylogPK) Exception!", e);
	}
}
/**
 * 用VO对象的属性值更新数据库。
 *
 * 创建日期：(2005-10-11)
 * @param tallylog nc.vo.lowcost.tally.TallylogVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public void update(TallylogVO tallylog) throws java.rmi.RemoteException {

	try {
		TallylogDMO dmo = new TallylogDMO();
		dmo.update(tallylog);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("TallylogBO::update(TallylogVO) Exception!", e);
	}
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.lowcost.tally.TallylogVO[] 查到的VO对象数组
 * @param unitCode int
 * @exception java.rmi.RemoteException 异常说明。
 */
public TallylogVO[] queryAll(String pk_corp) throws java.rmi.RemoteException {

	TallylogVO[] tallylogs = null;
	try {
		TallylogDMO dmo = new TallylogDMO();
		tallylogs = dmo.queryAll(pk_corp);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("TallylogBean::queryAll(String pk_corp) Exception!", e);
	}
	return tallylogs;
}
/**
 * 根据VO中所设定的条件返回所有符合条件的VO数组
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.lowcost.tally.TallylogVO[]
 * @param tallylogVO nc.vo.lowcost.tally.TallylogVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public TallylogVO[] queryByVO(TallylogVO condTallylogVO, Boolean isAnd) throws java.rmi.RemoteException {

	TallylogVO[] tallylogs = null;
	try {
		TallylogDMO dmo = new TallylogDMO();
		tallylogs = dmo.queryByVO(condTallylogVO, isAnd);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("TallylogBean::queryByVO(TallylogVO condTallylogVO, Boolean isAnd) Exception!", e);
	}
	return tallylogs;
}
public TallylogVO doTally(TallylogVO vo) throws RemoteException {
    TallylogVO tallylog = null;
    
    try {
        TallylogDMO dmo = new TallylogDMO();
        tallylog = dmo.doTally(vo);
        if((new VoucherDealDMO()).getIfConnectBank()){
	        if(tallylog.getNewsum()!=null && tallylog.getNewsum().compareTo(new UFDouble(0.0f))>0){
	            (new VoucherDealDMO()).doLowCostTrade(String.valueOf(vo.getTallydate().getYear()),vo.getTallydate().getStrMonth(),"1",tallylog.getNewsum());
	        }
	        
	        if(tallylog.getCancelsum()!=null && tallylog.getCancelsum().compareTo(new UFDouble(0.0f))>0){
	            (new VoucherDealDMO()).doLowCostTrade(String.valueOf(vo.getTallydate().getYear()),vo.getTallydate().getStrMonth(),"2",tallylog.getCancelsum());
	        }
        }
    } catch (Exception e) {
		reportException(e);
		throw new RemoteException(e.getMessage());        
    }
    return tallylog;
}

public String doCheck() throws RemoteException {
    String checkMsg = "";
    try {
    	String acc = DCTools.getSysParam("LC02");
    	System.out.println("低值易耗品账号："+acc);
        TallylogDMO dmo = new TallylogDMO();
        UFDouble LcBalance = dmo.getLcBalance();
        UFDouble BankBalance = (new VoucherDealDMO()).getSubjBanlance("1001",acc,new UFDate(new Date()));
        
        checkMsg += "NC中低值易耗品余额为："+NumFormate.getPrecisionData(LcBalance,2) + "\n";
        checkMsg += "大机中地址易耗品余额为："+NumFormate.getPrecisionData(BankBalance,2) + "\n";
        if(LcBalance.compareTo(BankBalance)==0){
            checkMsg += "两者余额相等";
        } else {
            checkMsg += "两者差额为：" + NumFormate.getPrecisionData(LcBalance.sub(BankBalance),2);
        }
    } catch (Exception e) {
        reportException(e);
        throw new RemoteException(e.getMessage());
    }
    return checkMsg;
}
}