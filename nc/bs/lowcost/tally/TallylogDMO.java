/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.lowcost.tally;

import java.sql.*;
import java.math.*;
import java.util.*;

import nc.bs.mw.sql.UFConnection;
import nc.bs.pub.*;
import nc.vo.pub.lang.*;
import nc.vo.lowcost.tally.*;
/**
 * Tallylog的DMO类。
 *
 * 创建日期：(2005-10-11)
 * @author：
 */
public class TallylogDMO extends DataManageObject {
/**
 * TallylogDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public TallylogDMO() throws javax.naming.NamingException, SystemException {
	super();
}
/**
 * TallylogDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public TallylogDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.lowcost.tally.TallylogVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public TallylogVO findByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.tally.TallylogDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	String sql = "select pk_corp, pk_user, tallydate, newsum, cancelsum, transsum, def1, def2, def3, def4, def5 from lc_tallylog where pk_tallylog = ?";

	TallylogVO tallylog = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			tallylog = new TallylogVO(key);
			// pk_corp :
			String pk_corp = rs.getString(1);
			tallylog.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// pk_user :
			String pk_user = rs.getString(2);
			tallylog.setPk_user(pk_user == null ? null : pk_user.trim());
			// tallydate :
			String tallydate = rs.getString(3);
			tallylog.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			// newsum :
			BigDecimal newsum = (BigDecimal)rs.getObject(4);
			tallylog.setNewsum(newsum == null ? null : new UFDouble(newsum));
			// cancelsum :
			BigDecimal cancelsum = (BigDecimal)rs.getObject(5);
			tallylog.setCancelsum(cancelsum == null ? null : new UFDouble(cancelsum));
			// transsum :
			BigDecimal transsum = (BigDecimal)rs.getObject(6);
			tallylog.setTranssum(transsum == null ? null : new UFDouble(transsum));
			// def1 :
			String def1 = rs.getString(7);
			tallylog.setDef1(def1 == null ? null : def1.trim());
			// def2 :
			String def2 = rs.getString(8);
			tallylog.setDef2(def2 == null ? null : def2.trim());
			// def3 :
			String def3 = rs.getString(9);
			tallylog.setDef3(def3 == null ? null : def3.trim());
			// def4 :
			String def4 = rs.getString(10);
			tallylog.setDef4(def4 == null ? null : def4.trim());
			// def5 :
			String def5 = rs.getString(11);
			tallylog.setDef5(def5 == null ? null : def5.trim());
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.tally.TallylogDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return tallylog;
}
/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2005-10-11)
 * @param node nc.vo.lowcost.tally.TallylogVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insert(TallylogVO tallylog) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.tally.TallylogDMO", "insert", new Object[]{tallylog});
	/*************************************************************/

	String sql = "insert into lc_tallylog(pk_tallylog, pk_corp, pk_user, tallydate, newsum, cancelsum, transsum, def1, def2, def3, def4, def5) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		key = getOID();
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// set PK fields:
		stmt.setString(1, key);
		// set non PK fields:
		if (tallylog.getPk_corp() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, tallylog.getPk_corp());
		}
		if (tallylog.getPk_user() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, tallylog.getPk_user());
		}
		if (tallylog.getTallydate() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, tallylog.getTallydate().toString());
		}
		if (tallylog.getNewsum() == null) {
			stmt.setNull(5, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(5, tallylog.getNewsum().toBigDecimal());
		}
		if (tallylog.getCancelsum() == null) {
			stmt.setNull(6, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(6, tallylog.getCancelsum().toBigDecimal());
		}
		if (tallylog.getTranssum() == null) {
			stmt.setNull(7, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(7, tallylog.getTranssum().toBigDecimal());
		}
		if (tallylog.getDef1() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, tallylog.getDef1());
		}
		if (tallylog.getDef2() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, tallylog.getDef2());
		}
		if (tallylog.getDef3() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, tallylog.getDef3());
		}
		if (tallylog.getDef4() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, tallylog.getDef4());
		}
		if (tallylog.getDef5() == null) {
			stmt.setNull(12, Types.CHAR);
		}
		else {
			stmt.setString(12, tallylog.getDef5());
		}
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.tally.TallylogDMO", "insert", new Object[]{tallylog});
	/*************************************************************/

	return key;
}
/**
 * 向数据库插入一批VO对象。
 *
 * 创建日期：(2005-10-11)
 * @param tallylogs nc.vo.lowcost.tally.TallylogVO[]
 * @exception java.sql.SQLException 异常说明。
 */
public String[] insertArray(TallylogVO[] tallylogs) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.tally.TallylogDMO", "insertArray", new Object[]{tallylogs});
	/*************************************************************/

	String sql = "insert into lc_tallylog(pk_tallylog, pk_corp, pk_user, tallydate, newsum, cancelsum, transsum, def1, def2, def3, def4, def5) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	String[] keys = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		keys = getOIDs(tallylogs.length);
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < tallylogs.length; i++) {
			// set PK fields:
			stmt.setString(1, keys[i]);
			// set non PK fields:
			if (tallylogs[i].getPk_corp() == null) {
				stmt.setNull(2, Types.CHAR);
			}
			else {
				stmt.setString(2, tallylogs[i].getPk_corp());
			}
			if (tallylogs[i].getPk_user() == null) {
				stmt.setNull(3, Types.CHAR);
			}
			else {
				stmt.setString(3, tallylogs[i].getPk_user());
			}
			if (tallylogs[i].getTallydate() == null) {
				stmt.setNull(4, Types.CHAR);
			}
			else {
				stmt.setString(4, tallylogs[i].getTallydate().toString());
			}
			if (tallylogs[i].getNewsum() == null) {
				stmt.setNull(5, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(5, tallylogs[i].getNewsum().toBigDecimal());
			}
			if (tallylogs[i].getCancelsum() == null) {
				stmt.setNull(6, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(6, tallylogs[i].getCancelsum().toBigDecimal());
			}
			if (tallylogs[i].getTranssum() == null) {
				stmt.setNull(7, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(7, tallylogs[i].getTranssum().toBigDecimal());
			}
			if (tallylogs[i].getDef1() == null) {
				stmt.setNull(8, Types.CHAR);
			}
			else {
				stmt.setString(8, tallylogs[i].getDef1());
			}
			if (tallylogs[i].getDef2() == null) {
				stmt.setNull(9, Types.CHAR);
			}
			else {
				stmt.setString(9, tallylogs[i].getDef2());
			}
			if (tallylogs[i].getDef3() == null) {
				stmt.setNull(10, Types.CHAR);
			}
			else {
				stmt.setString(10, tallylogs[i].getDef3());
			}
			if (tallylogs[i].getDef4() == null) {
				stmt.setNull(11, Types.CHAR);
			}
			else {
				stmt.setString(11, tallylogs[i].getDef4());
			}
			if (tallylogs[i].getDef5() == null) {
				stmt.setNull(12, Types.CHAR);
			}
			else {
				stmt.setString(12, tallylogs[i].getDef5());
			}
			//
			stmt.executeUpdate();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.tally.TallylogDMO", "insertArray", new Object[]{tallylogs});
	/*************************************************************/

	return keys;
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2005-10-11)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(TallylogVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.tally.TallylogDMO", "delete", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from lc_tallylog where pk_tallylog = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.tally.TallylogDMO", "delete", new Object[]{vo});
	/*************************************************************/
}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2005-10-11)
 * @param tallylog nc.vo.lowcost.tally.TallylogVO
 * @exception java.sql.SQLException 异常说明。
 */
public void update(TallylogVO tallylog) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.tally.TallylogDMO", "update", new Object[]{tallylog});
	/*************************************************************/

	String sql = "update lc_tallylog set pk_corp = ?, pk_user = ?, tallydate = ?, newsum = ?, cancelsum = ?, transsum = ?, def1 = ?, def2 = ?, def3 = ?, def4 = ?, def5 = ? where pk_tallylog = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (tallylog.getPk_corp() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, tallylog.getPk_corp());
		}
		if (tallylog.getPk_user() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, tallylog.getPk_user());
		}
		if (tallylog.getTallydate() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, tallylog.getTallydate().toString());
		}
		if (tallylog.getNewsum() == null) {
			stmt.setNull(4, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(4, tallylog.getNewsum().toBigDecimal());
		}
		if (tallylog.getCancelsum() == null) {
			stmt.setNull(5, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(5, tallylog.getCancelsum().toBigDecimal());
		}
		if (tallylog.getTranssum() == null) {
			stmt.setNull(6, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(6, tallylog.getTranssum().toBigDecimal());
		}
		if (tallylog.getDef1() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, tallylog.getDef1());
		}
		if (tallylog.getDef2() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, tallylog.getDef2());
		}
		if (tallylog.getDef3() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, tallylog.getDef3());
		}
		if (tallylog.getDef4() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, tallylog.getDef4());
		}
		if (tallylog.getDef5() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, tallylog.getDef5());
		}
		// find record by PK fields:
		stmt.setString(12, tallylog.getPrimaryKey());
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.tally.TallylogDMO", "update", new Object[]{tallylog});
	/*************************************************************/
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2005-10-11)
 * @return nc.vo.lowcost.tally.TallylogVO[]
 * @param unitCode int
 * @exception java.sql.SQLException 异常说明。
 */
public TallylogVO[] queryAll(String pk_corp) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.tally.TallylogDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	String sql = "";
	if (pk_corp != null) {
		sql = "select pk_tallylog, pk_corp, pk_user, tallydate, newsum, cancelsum, transsum, def1, def2, def3, def4, def5 from lc_tallylog where pk_corp = ?";
	}
	else {
		sql ="select pk_tallylog, pk_corp, pk_user, tallydate, newsum, cancelsum, transsum, def1, def2, def3, def4, def5 from lc_tallylog";
	}

	TallylogVO tallylogs[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		if (pk_corp != null) {
			stmt.setString(1, pk_corp);
		}
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			TallylogVO tallylog = new TallylogVO();
			// pk_tallylog :
			String pk_tallylog = rs.getString(1);
			tallylog.setPk_tallylog(pk_tallylog == null ? null : pk_tallylog.trim());
			// pk_corp :
			String pk_corp1 = rs.getString(2);
			tallylog.setPk_corp(pk_corp1 == null ? null : pk_corp1.trim());
			// pk_user :
			String pk_user = rs.getString(3);
			tallylog.setPk_user(pk_user == null ? null : pk_user.trim());
			// tallydate :
			String tallydate = rs.getString(4);
			tallylog.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			// newsum :
			BigDecimal newsum = (BigDecimal)rs.getObject(5);
			tallylog.setNewsum(newsum == null ? null : new UFDouble(newsum));
			// cancelsum :
			BigDecimal cancelsum = (BigDecimal)rs.getObject(6);
			tallylog.setCancelsum(cancelsum == null ? null : new UFDouble(cancelsum));
			// transsum :
			BigDecimal transsum = (BigDecimal)rs.getObject(7);
			tallylog.setTranssum(transsum == null ? null : new UFDouble(transsum));
			// def1 :
			String def1 = rs.getString(8);
			tallylog.setDef1(def1 == null ? null : def1.trim());
			// def2 :
			String def2 = rs.getString(9);
			tallylog.setDef2(def2 == null ? null : def2.trim());
			// def3 :
			String def3 = rs.getString(10);
			tallylog.setDef3(def3 == null ? null : def3.trim());
			// def4 :
			String def4 = rs.getString(11);
			tallylog.setDef4(def4 == null ? null : def4.trim());
			// def5 :
			String def5 = rs.getString(12);
			tallylog.setDef5(def5 == null ? null : def5.trim());

			v.addElement(tallylog);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	tallylogs = new TallylogVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(tallylogs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.tally.TallylogDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	return tallylogs;
}
/**
 * 根据VO中所设定的条件返回所有符合条件的VO数组
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.lowcost.tally.TallylogVO[]
 * @param tallylogVO nc.vo.lowcost.tally.TallylogVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public TallylogVO[] queryByVO(TallylogVO condTallylogVO, Boolean isAnd) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.tally.TallylogDMO", "queryByVO", new Object[]{condTallylogVO, isAnd});
	/*************************************************************/

	String strSql = "select pk_tallylog, pk_corp, pk_user, tallydate, newsum, cancelsum, transsum, def1, def2, def3, def4, def5 from lc_tallylog";
	String strConditionNames = "";
	String strAndOr = "and ";
	if (!isAnd.booleanValue()) {
		strAndOr = "or  ";
	}
	if (condTallylogVO.getPk_corp() != null) {
		strConditionNames += strAndOr + "pk_corp=? ";
	}
	if (condTallylogVO.getPk_user() != null) {
		strConditionNames += strAndOr + "pk_user=? ";
	}
	if (condTallylogVO.getTallydate() != null) {
		strConditionNames += strAndOr + "tallydate=? ";
	}
	if (condTallylogVO.getNewsum() != null) {
		strConditionNames += strAndOr + "newsum=? ";
	}
	if (condTallylogVO.getCancelsum() != null) {
		strConditionNames += strAndOr + "cancelsum=? ";
	}
	if (condTallylogVO.getTranssum() != null) {
		strConditionNames += strAndOr + "transsum=? ";
	}
	if (condTallylogVO.getDef1() != null) {
		strConditionNames += strAndOr + "def1=? ";
	}
	if (condTallylogVO.getDef2() != null) {
		strConditionNames += strAndOr + "def2=? ";
	}
	if (condTallylogVO.getDef3() != null) {
		strConditionNames += strAndOr + "def3=? ";
	}
	if (condTallylogVO.getDef4() != null) {
		strConditionNames += strAndOr + "def4=? ";
	}
	if (condTallylogVO.getDef5() != null) {
		strConditionNames += strAndOr + "def5=? ";
	}
	if (strConditionNames.length() > 0) {
		strConditionNames = strConditionNames.substring(3, strConditionNames.length() - 1);
	}
	else {
		return queryAll(null);
	}
	//拼接后的SQL语句
	strSql = strSql + " where " + strConditionNames;
	//
	int index = 0;
	TallylogVO tallylogs[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(strSql);
		// set query condition fields:
		// set non PK fields:
		if (condTallylogVO.getPk_corp() != null) {
			stmt.setString(++index, condTallylogVO.getPk_corp());
		}
		if (condTallylogVO.getPk_user() != null) {
			stmt.setString(++index, condTallylogVO.getPk_user());
		}
		if (condTallylogVO.getTallydate() != null) {
			stmt.setString(++index, condTallylogVO.getTallydate().toString());
		}
		if (condTallylogVO.getNewsum() != null) {
			stmt.setBigDecimal(++index, condTallylogVO.getNewsum().toBigDecimal());
		}
		if (condTallylogVO.getCancelsum() != null) {
			stmt.setBigDecimal(++index, condTallylogVO.getCancelsum().toBigDecimal());
		}
		if (condTallylogVO.getTranssum() != null) {
			stmt.setBigDecimal(++index, condTallylogVO.getTranssum().toBigDecimal());
		}
		if (condTallylogVO.getDef1() != null) {
			stmt.setString(++index, condTallylogVO.getDef1());
		}
		if (condTallylogVO.getDef2() != null) {
			stmt.setString(++index, condTallylogVO.getDef2());
		}
		if (condTallylogVO.getDef3() != null) {
			stmt.setString(++index, condTallylogVO.getDef3());
		}
		if (condTallylogVO.getDef4() != null) {
			stmt.setString(++index, condTallylogVO.getDef4());
		}
		if (condTallylogVO.getDef5() != null) {
			stmt.setString(++index, condTallylogVO.getDef5());
		}

		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			TallylogVO tallylog = new TallylogVO();
			//
			String pk_tallylog = rs.getString(1);
			tallylog.setPk_tallylog(pk_tallylog == null ? null : pk_tallylog.trim());
			//
			String pk_corp = rs.getString(2);
			tallylog.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			//
			String pk_user = rs.getString(3);
			tallylog.setPk_user(pk_user == null ? null : pk_user.trim());
			//
			String tallydate = rs.getString(4);
			tallylog.setTallydate(tallydate == null ? null : new UFDate(tallydate.trim()));
			//
			BigDecimal newsum = (BigDecimal)rs.getObject(5);
			tallylog.setNewsum(newsum == null ? null : new UFDouble(newsum));
			//
			BigDecimal cancelsum = (BigDecimal)rs.getObject(6);
			tallylog.setCancelsum(cancelsum == null ? null : new UFDouble(cancelsum));
			//
			BigDecimal transsum = (BigDecimal)rs.getObject(7);
			tallylog.setTranssum(transsum == null ? null : new UFDouble(transsum));
			//
			String def1 = rs.getString(8);
			tallylog.setDef1(def1 == null ? null : def1.trim());
			//
			String def2 = rs.getString(9);
			tallylog.setDef2(def2 == null ? null : def2.trim());
			//
			String def3 = rs.getString(10);
			tallylog.setDef3(def3 == null ? null : def3.trim());
			//
			String def4 = rs.getString(11);
			tallylog.setDef4(def4 == null ? null : def4.trim());
			//
			String def5 = rs.getString(12);
			tallylog.setDef5(def5 == null ? null : def5.trim());

			v.addElement(tallylog);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	tallylogs = new TallylogVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(tallylogs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.tally.TallylogDMO", "queryByVO", new Object[]{condTallylogVO, isAnd});
	/*************************************************************/

	return tallylogs;
}
public TallylogVO doTally(TallylogVO vo) throws SQLException {
    TallylogVO retvo = new TallylogVO();
	Connection con = null;
	PreparedStatement stmt = null;

	try {
		con = getConnection();
		String sqlCardQuery = "select sum(price*\"number\") from lc_card where (tallyflag is null or tallyflag = 'N')";
		String sqlCardUpdate = "update lc_card set tallyflag = 'Y',tallydate = '" + vo.getTallydate() + "' where (tallyflag is null or tallyflag = 'N')";
		String sqlCancelQuery = "select sum(price*\"number\") from lc_cancel_m cm,lc_cancel c,lc_card card where c.pk_cancel=cm.pk_cancel and cm.pk_lccard=card.pk_lccard and c.dr=0 and (c.tallyflag is null or c.tallyflag = 'N') and c.checkflag = 'Y'";
		String sqlCancelUpdate = "update lc_cancel set tallyflag = 'Y',tallydate = '" + vo.getTallydate() + "' where (tallyflag is null or tallyflag = 'N') and checkflag='Y'";
		String sqlTransQuery = "select count(*) from lc_trans_m tm,lc_trans t where tm.pk_trans=t.pk_trans and t.dr=0 and (t.tallyflag is null or t.tallyflag = 'N') and t.checkflag = 'Y'";
		String sqlTransUpdate = "update lc_trans  set tallyflag = 'Y',tallydate = '" + vo.getTallydate() + "' where (tallyflag is null or tallyflag = 'N') and checkflag = 'Y'";
		String sqlLastDateQuery = "select max(tallydate) from lc_tallylog";
		
		if(isDB2(con)){
			sqlCardQuery = "select sum(price*number) from lc_card where (tallyflag is null or tallyflag = 'N')";
			sqlCardUpdate = "update lc_card set tallyflag = 'Y',tallydate = '" + vo.getTallydate() + "' where (tallyflag is null or tallyflag = 'N')";
			sqlCancelQuery = "select sum(price*number) from lc_cancel_m cm,lc_cancel c,lc_card card where c.pk_cancel=cm.pk_cancel and cm.pk_lccard=card.pk_lccard and c.dr=0 and (c.tallyflag is null or c.tallyflag = 'N') and c.checkflag = 'Y'";
			sqlCancelUpdate = "update lc_cancel set tallyflag = 'Y',tallydate = '" + vo.getTallydate() + "' where (tallyflag is null or tallyflag = 'N') and checkflag='Y'";
			sqlTransQuery = "select count(*) from lc_trans_m tm,lc_trans t where tm.pk_trans=t.pk_trans and t.dr=0 and (t.tallyflag is null or t.tallyflag = 'N') and t.checkflag = 'Y'";
			sqlTransUpdate = "update lc_trans  set tallyflag = 'Y',tallydate = '" + vo.getTallydate() + "' where (tallyflag is null or tallyflag = 'N') and checkflag = 'Y'";
			sqlLastDateQuery = "select max(tallydate) from lc_tallylog";		    
		}
		
		//卡片统计
		stmt = con.prepareStatement(sqlCardQuery);
		ResultSet rs = stmt.executeQuery();
		if(rs.next()){
		    Object objNewSum = rs.getObject(1);
		    UFDouble newSum = null;
		    if(objNewSum!=null){
			    if(objNewSum instanceof Integer){
			        newSum = new UFDouble(((Integer)objNewSum).intValue());
			    }
			    if(objNewSum instanceof BigDecimal){
			        newSum = new UFDouble((BigDecimal)objNewSum);
			    }
		        retvo.setNewsum(newSum);
		    }
		}
		stmt.close();
		//卡片更新
		stmt = con.prepareStatement(sqlCardUpdate);
		stmt.executeUpdate();
		stmt.close();
		
		//调拨统计
		stmt = con.prepareStatement(sqlTransQuery);
		ResultSet rs1 = stmt.executeQuery();
		if(rs1.next()){
		    Object objTransSum = rs1.getObject(1);
		    UFDouble transSum = null;
		    if(objTransSum!=null){
			    if(objTransSum instanceof Integer){
			        transSum = new UFDouble(((Integer)objTransSum).intValue());
			    }
			    if(objTransSum instanceof BigDecimal){
			        transSum = new UFDouble((BigDecimal)objTransSum);
			    }
		        retvo.setTranssum(transSum);		    
		    }
		}
		
		//调拨更新
		stmt = con.prepareStatement(sqlTransUpdate);
		stmt.executeUpdate();
		stmt.close();
		
		//核销统计
		stmt = con.prepareStatement(sqlCancelQuery);
		ResultSet rs2 = stmt.executeQuery();
		if(rs2.next()){
		    Object objCancelSum = rs2.getObject(1);
		    UFDouble cancelSum = null;
		    if(objCancelSum!=null){
			    if(objCancelSum instanceof Integer){
			        cancelSum = new UFDouble(((Integer)objCancelSum).intValue());
			    }
			    if(objCancelSum instanceof BigDecimal){
			        cancelSum = new UFDouble((BigDecimal)objCancelSum);
			    }
		        retvo.setCancelsum(cancelSum);		    
		    }
		}		
		//核销更新
		stmt = con.prepareStatement(sqlCancelUpdate);
		stmt.executeUpdate();
		stmt.close();
		
		//
		stmt = con.prepareStatement(sqlLastDateQuery);
		ResultSet rs3 = stmt.executeQuery();
		if(rs3.next()) {
		    String strLastDate = rs3.getString(1);
		    
		    if(strLastDate!=null && strLastDate.trim().length()>0) {
		        UFDate LastDate = new UFDate (strLastDate);
		        retvo.setTallydate(LastDate);
		    }
		}
		
		
		TallylogVO logVO = (TallylogVO) retvo.clone();
		logVO.setTallydate(vo.getTallydate());
		logVO.setPk_corp(vo.getPk_corp());
		logVO.setPk_user(vo.getPk_user());
		try {
		    insert(logVO);
		} catch(Exception e) {
		    throw new SQLException (e.getMessage());
		}
		
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}		
	}
	return retvo;
}

public boolean isDB2 (Connection con) throws SQLException {
    try {
	    UFConnection ufcon = (UFConnection)con;
	    if(ufcon.getDatabaseType()==UFConnection.DB2){
	        return true;
	    }
    } catch(Exception e){
        throw new SQLException(e.getMessage());
    }
    return false;
}

public UFDouble getLcBalance() throws SQLException {
    UFDouble LcBalance = new UFDouble(0.0f);
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "select sum(\"number\"*price) from lc_card where tallyflag = 'Y' and (cancelflag is null or cancelflag = 'N')";
    String sqldb2 = "select sum(number*price) from lc_card where tallyflag = 'Y' and (cancelflag is null or cancelflag = 'N')";
    try {
        con = getConnection();
        if(isDB2(con)){
            stmt = con.prepareStatement(sqldb2);
        } else {
            stmt = con.prepareStatement(sql);
        }
        
        ResultSet rs = stmt.executeQuery();
        if(rs.next()){
            Object obj = rs.getObject(1);
            if(obj!=null){
                String str = obj.toString();
                if(str!=null&&str.length()>0){
                    LcBalance = new UFDouble(str);
                }
            }
        } else {
            
        }
        
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return LcBalance;
}

public UFDate queryLastTallyDate() throws SQLException {
    UFDate lastTallyDate = null;
    Connection con = null;
    PreparedStatement stmt = null;
    String sql = "select max(tallydate) from lc_tallylog ";
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        if(rs.next()){
            String maxTallyDate = rs.getString(1);
            if(maxTallyDate!=null) {
                lastTallyDate = new UFDate(maxTallyDate);
            }
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return lastTallyDate;
}
}