/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.lowcost.subj;

import java.sql.*;
import java.util.*;
import nc.bs.pub.*;
import nc.vo.lowcost.subj.*;
/**
 * Subj的DMO类。
 *
 * 创建日期：(2006-2-7)
 * @author：
 */
public class SubjDMO extends DataManageObject {
/**
 * SubjDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public SubjDMO() throws javax.naming.NamingException, SystemException {
	super();
}
/**
 * SubjDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public SubjDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.lowcost.subj.SubjVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public SubjVO findByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.subj.SubjDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	String sql = "select pk_corp, bank_kmbm,pk_lctype from lc_subj where pk_subj = ?";

	SubjVO subj = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			subj = new SubjVO(key);
			// pk_corp :
			String pk_corp = rs.getString(1);
			subj.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// bank_kmbm :
			String bank_kmbm = rs.getString(2);
			subj.setBank_kmbm(bank_kmbm == null ? null : bank_kmbm.trim());
			
			String pk_lctype = rs.getString(3);
			subj.setPk_lctype(pk_lctype == null ? null:pk_lctype.trim());
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.subj.SubjDMO", "findByPrimaryKey", new Object[]{key});
	/*************************************************************/

	return subj;
}
/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2006-2-7)
 * @param node nc.vo.lowcost.subj.SubjVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insert(SubjVO subj) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.subj.SubjDMO", "insert", new Object[]{subj});
	/*************************************************************/

	String sql = "insert into lc_subj(pk_subj, pk_corp, bank_kmbm,pk_lctype) values(?, ?, ?,?)";

	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		key = getOID();
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// set PK fields:
		stmt.setString(1, key);
		// set non PK fields:
		if (subj.getPk_corp() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, subj.getPk_corp());
		}
		if (subj.getBank_kmbm() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, subj.getBank_kmbm());
		}
		if (subj.getPk_lctype() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, subj.getPk_lctype());
		}
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.subj.SubjDMO", "insert", new Object[]{subj});
	/*************************************************************/

	return key;
}
/**
 * 向数据库插入一批VO对象。
 *
 * 创建日期：(2006-2-7)
 * @param subjs nc.vo.lowcost.subj.SubjVO[]
 * @exception java.sql.SQLException 异常说明。
 */
public String[] insertArray(SubjVO[] subjs) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.subj.SubjDMO", "insertArray", new Object[]{subjs});
	/*************************************************************/

	String sql = "insert into lc_subj(pk_subj, pk_corp, bank_kmbm,pk_lctype) values(?, ?, ?,?)";

	String[] keys = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		keys = getOIDs(subjs.length);
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < subjs.length; i++) {
			// set PK fields:
			stmt.setString(1, keys[i]);
			// set non PK fields:
			if (subjs[i].getPk_corp() == null) {
				stmt.setNull(2, Types.CHAR);
			}
			else {
				stmt.setString(2, subjs[i].getPk_corp());
			}
			if (subjs[i].getBank_kmbm() == null) {
				stmt.setNull(3, Types.CHAR);
			}
			else {
				stmt.setString(3, subjs[i].getBank_kmbm());
			}
			//
			if (subjs[i].getPk_lctype() == null) {
				stmt.setNull(4, Types.CHAR);
			}
			else {
				stmt.setString(4, subjs[i].getPk_lctype());
			}
			stmt.executeUpdate();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.subj.SubjDMO", "insertArray", new Object[]{subjs});
	/*************************************************************/

	return keys;
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2006-2-7)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(SubjVO vo) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.subj.SubjDMO", "delete", new Object[]{vo});
	/*************************************************************/

	String sql = "delete from lc_subj where pk_subj = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.subj.SubjDMO", "delete", new Object[]{vo});
	/*************************************************************/
}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2006-2-7)
 * @param subj nc.vo.lowcost.subj.SubjVO
 * @exception java.sql.SQLException 异常说明。
 */
public void update(SubjVO subj) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.subj.SubjDMO", "update", new Object[]{subj});
	/*************************************************************/

	String sql = "update lc_subj set pk_corp = ?, bank_kmbm = ?,pk_lctype =? where pk_subj = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (subj.getPk_corp() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, subj.getPk_corp());
		}
		if (subj.getBank_kmbm() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, subj.getBank_kmbm());
		}
		if(subj.getPk_lctype()==null){
		    stmt.setNull(3,Types.CHAR);
		} else {
		    stmt.setString(3,subj.getPk_lctype());
		}
		// find record by PK fields:
		stmt.setString(4, subj.getPrimaryKey());
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.subj.SubjDMO", "update", new Object[]{subj});
	/*************************************************************/
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2006-2-7)
 * @return nc.vo.lowcost.subj.SubjVO[]
 * @param unitCode int
 * @exception java.sql.SQLException 异常说明。
 */
public SubjVO[] queryAll(String pk_corp) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.subj.SubjDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	String sql = "";
	if (pk_corp != null) {
		sql = "select pk_subj, pk_corp, bank_kmbm,pk_lctype from lc_subj where pk_corp = ?";
	}
	else {
		sql ="select pk_subj, pk_corp, bank_kmbm,pk_lctype from lc_subj";
	}

	SubjVO subjs[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		if (pk_corp != null) {
			stmt.setString(1, pk_corp);
		}
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			SubjVO subj = new SubjVO();
			// pk_subj :
			String pk_subj = rs.getString(1);
			subj.setPk_subj(pk_subj == null ? null : pk_subj.trim());
			// pk_corp :
			String pk_corp1 = rs.getString(2);
			subj.setPk_corp(pk_corp1 == null ? null : pk_corp1.trim());
			// bank_kmbm :
			String bank_kmbm = rs.getString(3);
			subj.setBank_kmbm(bank_kmbm == null ? null : bank_kmbm.trim());

			String pk_lctype = rs.getString(4);
			subj.setPk_lctype(pk_lctype == null ? null : pk_lctype.trim());
			v.addElement(subj);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	subjs = new SubjVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(subjs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.subj.SubjDMO", "queryAll", new Object[]{pk_corp});
	/*************************************************************/

	return subjs;
}
/**
 * 根据VO中所设定的条件返回所有符合条件的VO数组
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.lowcost.subj.SubjVO[]
 * @param subjVO nc.vo.lowcost.subj.SubjVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public SubjVO[] queryByVO(SubjVO condSubjVO, Boolean isAnd) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.lowcost.subj.SubjDMO", "queryByVO", new Object[]{condSubjVO, isAnd});
	/*************************************************************/

	String strSql = "select pk_subj, pk_corp, bank_kmbm,pk_lctype from lc_subj";
	String strConditionNames = "";
	String strAndOr = "and ";
	if (!isAnd.booleanValue()) {
		strAndOr = "or  ";
	}
	if (condSubjVO.getPk_corp() != null) {
		strConditionNames += strAndOr + "pk_corp=? ";
	}
	if (condSubjVO.getBank_kmbm() != null) {
		strConditionNames += strAndOr + "bank_kmbm=? ";
	}
	if(condSubjVO.getPk_lctype()!=null){
	    strConditionNames += strAndOr + "pk_lctype=? ";
	}
	if (strConditionNames.length() > 0) {
		strConditionNames = strConditionNames.substring(3, strConditionNames.length() - 1);
	}
	else {
		return queryAll(null);
	}
	//拼接后的SQL语句
	strSql = strSql + " where " + strConditionNames;
	//
	int index = 0;
	SubjVO subjs[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(strSql);
		// set query condition fields:
		// set non PK fields:
		if (condSubjVO.getPk_corp() != null) {
			stmt.setString(++index, condSubjVO.getPk_corp());
		}
		if (condSubjVO.getBank_kmbm() != null) {
			stmt.setString(++index, condSubjVO.getBank_kmbm());
		}
		if(condSubjVO.getPk_lctype()!=null){
		    stmt.setString(++index,condSubjVO.getPk_lctype());
		}
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			SubjVO subj = new SubjVO();
			//
			String pk_subj = rs.getString(1);
			subj.setPk_subj(pk_subj == null ? null : pk_subj.trim());
			//
			String pk_corp = rs.getString(2);
			subj.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			//
			String bank_kmbm = rs.getString(3);
			subj.setBank_kmbm(bank_kmbm == null ? null : bank_kmbm.trim());

			String pk_lctype = rs.getString(4);
			subj.setPk_lctype(pk_lctype == null ? null : pk_lctype.trim());
			
			v.addElement(subj);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	subjs = new SubjVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(subjs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.lowcost.subj.SubjDMO", "queryByVO", new Object[]{condSubjVO, isAnd});
	/*************************************************************/

	return subjs;
}

public String [] queryCorp() throws SQLException {
    String [] pk_corps = null;
    String sql = "select pk_corp from bd_corp where pk_corp in (select pk_corp from sm_createcorp where funccode = '2090') order by unitcode ";
    Connection con = null;
    PreparedStatement stmt = null;
    try {
        con = getConnection();
        stmt = con.prepareStatement(sql);
        ResultSet rs = stmt.executeQuery();
        Vector v = new Vector();
        while(rs.next()) {
            String pk_corp = rs.getString(1);
            v.add(pk_corp);
        }
        if(v.size()>0){
            pk_corps = new String [v.size()];
            v.copyInto(pk_corps);
        }
    } finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}          
    }
    return pk_corps;
}
}