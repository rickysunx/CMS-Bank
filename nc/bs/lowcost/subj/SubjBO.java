/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.lowcost.subj;

import java.util.*;
import java.rmi.*;

import nc.bs.lowcost.type.TypeDMO;
import nc.bs.pub.*;
import nc.vo.lowcost.subj.*;
import nc.vo.lowcost.type.TypeVO;
/**
 * Subj的BO类
 *
 * 创建日期：(2006-2-7)
 * @author：
 */
public class SubjBO extends BusinessObject {

/**
	 * 
	 */
	private static final long serialVersionUID = -6480536997573457534L;

/**
 * SubjBO 构造子注解。
 */
public SubjBO() {
	super();
}
/**
 * EJB规范中要求的方法。
 *
 * 创建日期：(2006-2-7)
 */
public void ejbCreate() {}
/**
 * 通过主键获得VO对象。
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.lowcost.subj.SubjVO
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
public SubjVO findByPrimaryKey(String key) throws java.rmi.RemoteException {

	SubjVO subj = null;
	try {
		SubjDMO dmo = new SubjDMO();
		subj = dmo.findByPrimaryKey(key);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("SubjBean::findByPrimaryKey(SubjPK) Exception!", e);
	}
	return subj;
}
/**
 * 向数据库中插入一个VO对象。
 *
 * 创建日期：(2006-2-7)
 * @param subj nc.vo.lowcost.subj.SubjVO
 * @return java.lang.String  所插入VO对象的主键字符串。
 * @exception java.rmi.RemoteException 异常说明。
 */
public String insert(SubjVO subj) throws RemoteException {

	try {
		SubjDMO dmo = new SubjDMO();
		String key = dmo.insert(subj);
		return key;
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("SubjBO::insert(SubjVO) Exception!", e);
	}
}
/**
 * 向数据库中插入一批VO对象。
 *
 * 创建日期：(2006-2-7)
 * @param subj nc.vo.lowcost.subj.SubjVO[]
 * @return java.lang.String[]  所插入VO对象数组的主键字符串数组。
 * @exception java.rmi.RemoteException 异常说明。
 */
public String[] insertArray(SubjVO[] subjs) throws RemoteException {

	try {
		SubjDMO dmo = new SubjDMO();
		String[] keys = dmo.insertArray(subjs);
		return keys;
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("SubjBO::insertArray(SubjVO[]) Exception!", e);
	}
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2006-2-7)
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
public void delete(SubjVO vo) throws java.rmi.RemoteException {

	try {
		SubjDMO dmo = new SubjDMO();
		dmo.delete(vo);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("SubjBO::delete(SubjPK) Exception!", e);
	}
}
/**
 * 用VO对象的属性值更新数据库。
 *
 * 创建日期：(2006-2-7)
 * @param subj nc.vo.lowcost.subj.SubjVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public void update(SubjVO subj) throws java.rmi.RemoteException {

	try {
		SubjDMO dmo = new SubjDMO();
		dmo.update(subj);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("SubjBO::update(SubjVO) Exception!", e);
	}
}
/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.lowcost.subj.SubjVO[] 查到的VO对象数组
 * @param unitCode int
 * @exception java.rmi.RemoteException 异常说明。
 */
public SubjVO[] queryAll(String pk_corp) throws java.rmi.RemoteException {

	SubjVO[] subjs = null;
	try {
		SubjDMO dmo = new SubjDMO();
		subjs = dmo.queryAll(pk_corp);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("SubjBean::queryAll(String pk_corp) Exception!", e);
	}
	return subjs;
}
/**
 * 根据VO中所设定的条件返回所有符合条件的VO数组
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.lowcost.subj.SubjVO[]
 * @param subjVO nc.vo.lowcost.subj.SubjVO
 * @param isAnd boolean 以与条件查询还是以或条件查询
 * @exception java.sql.SQLException 异常说明。
 */
public SubjVO[] queryByVO(SubjVO condSubjVO, Boolean isAnd) throws java.rmi.RemoteException {

	SubjVO[] subjs = null;
	try {
		SubjDMO dmo = new SubjDMO();
		subjs = dmo.queryByVO(condSubjVO, isAnd);
	}
	catch (Exception e) {
		reportException(e);
		throw new RemoteException("SubjBean::queryByVO(SubjVO condSubjVO, Boolean isAnd) Exception!", e);
	}
	return subjs;
}

public void saveAll(SubjVO [] vos) throws RemoteException {
    try {
        SubjDMO dmo = new SubjDMO();
        if(vos!=null){
            for (int i = 0; i < vos.length; i++) {
                if(vos[i].getPk_subj()==null || vos[i].getPk_subj().trim().length()==0){
                    dmo.insert(vos[i]);
                } else {
                    if(vos[i].getBank_kmbm()==null || vos[i].getBank_kmbm().trim().length()==0){
                        dmo.delete(vos[i]);
                    } else {
                        dmo.update(vos[i]);
                    }
                }
            }
        }
    } catch (Exception e){
        e.printStackTrace();
        throw new RemoteException(e.getMessage());
    }
}

public SubjVO [] queryAllByCorp(String pk_corp) throws RemoteException {
    SubjVO [] vos = null;
    try {
        SubjDMO dmo = new SubjDMO();

        String [] pk_lctypes = null;
        
        TypeDMO typedmo = new TypeDMO();
        TypeVO [] tvos = typedmo.queryAll(null);
        if(tvos!=null){
            pk_lctypes = new String [tvos.length];
            for (int i = 0; i < tvos.length; i++) {
                pk_lctypes[i] = tvos[i].getPk_lctype();
            }
        } else {
            throw new Exception ("物品类别为空");
        }
        
        SubjVO condvo = new SubjVO();
        condvo.setPk_corp(pk_corp);
        SubjVO [] svos = dmo.queryByVO(condvo,new Boolean(true));
        HashMap hmSubj = new HashMap();
        if(svos!=null){
            for (int i = 0; i < svos.length; i++) {
                hmSubj.put(svos[i].getPk_lctype(),svos[i]);
            }
        }
        
        vos = new SubjVO[pk_lctypes.length];
        for (int i = 0; i < pk_lctypes.length; i++) {
            String pk_lctype = pk_lctypes[i];
            SubjVO svo = null;
            if(hmSubj.containsKey(pk_lctype)){
                svo = (SubjVO) hmSubj.get(pk_lctype);
            } else {
                svo = new SubjVO();
                svo.setPk_corp(pk_corp);
                svo.setPk_lctype(pk_lctype);
                svo.setBank_kmbm("#");
            }
            vos[i] = svo;
        }
        
    } catch (Exception e){
        e.printStackTrace();
        throw new RemoteException(e.getMessage());
    }
    return vos;
}

public SubjVO [] queryAllVO() throws RemoteException {
    SubjVO [] vos = null;
    try {
        SubjDMO dmo = new SubjDMO();
        
        String [] pk_corps = dmo.queryCorp();
        if(pk_corps==null){
            return null;
        }
        
        SubjVO [] svos = dmo.queryAll(null);
        HashMap hmSubj = new HashMap();
        if(svos!=null){
            for (int i = 0; i < svos.length; i++) {
                hmSubj.put(svos[i].getPk_corp(),svos[i]);
            }
        }
        
        vos = new SubjVO[pk_corps.length];
        for (int i = 0; i < pk_corps.length; i++) {
            String pk_corp = pk_corps[i];
            SubjVO svo = null;
            if(hmSubj.containsKey(pk_corp)){
                svo = (SubjVO) hmSubj.get(pk_corp);
            } else {
                svo = new SubjVO();
                svo.setPk_corp(pk_corp);
            }
            vos[i] = svo;
        }
        
    } catch (Exception e){
        e.printStackTrace();
        throw new RemoteException(e.getMessage());
    }
    return vos;
}

}