/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.lowcost.tally;

import java.util.ArrayList;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
/**
 * 此处插入类型说明。
 * 
 * 创建日期：(2005-10-11)
 * @author：
 */
public class TallylogVO extends CircularlyAccessibleValueObject {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8756886659226607553L;
	public String m_pk_tallylog;
	public String m_pk_corp;
	public String m_pk_user;
	public UFDate m_tallydate;
	public UFDouble m_newsum;
	public UFDouble m_cancelsum;
	public UFDouble m_transsum;
	public String m_def1;
	public String m_def2;
	public String m_def3;
	public String m_def4;
	public String m_def5;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_tallylogField;
	private static StringField m_pk_corpField;
	private static StringField m_pk_userField;
	private static UFDateField m_tallydateField;
	private static UFDoubleField m_newsumField;
	private static UFDoubleField m_cancelsumField;
	private static UFDoubleField m_transsumField;
	private static StringField m_def1Field;
	private static StringField m_def2Field;
	private static StringField m_def3Field;
	private static StringField m_def4Field;
	private static StringField m_def5Field;
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2005-10-11)
 */
public TallylogVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2005-10-11)
 * @param ??fieldNameForMethod?? 主键值
 */
public TallylogVO(String newPk_tallylog) {

	// 为主键字段赋值:
	m_pk_tallylog = newPk_tallylog;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2005-10-11)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	TallylogVO tallylog = (TallylogVO)o;

	// 你在下面复制本VO对象的所有属性：

	return tallylog;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2005-10-11)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Tallylog";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_tallylog;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2005-10-11)
 * @param m_pk_tallylog String 
 */
public void setPrimaryKey(String newPk_tallylog) {

	m_pk_tallylog = newPk_tallylog;
}
/**
 * 属性m_pk_tallylog的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getPk_tallylog() {
	return m_pk_tallylog;
}
/**
 * 属性m_pk_corp的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getPk_corp() {
	return m_pk_corp;
}
/**
 * 属性m_pk_user的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getPk_user() {
	return m_pk_user;
}
/**
 * 属性m_tallydate的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return UFDate
 */
public UFDate getTallydate() {
	return m_tallydate;
}
/**
 * 属性m_newsum的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return UFDouble
 */
public UFDouble getNewsum() {
	return m_newsum;
}
/**
 * 属性m_cancelsum的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return UFDouble
 */
public UFDouble getCancelsum() {
	return m_cancelsum;
}
/**
 * 属性m_transsum的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return UFDouble
 */
public UFDouble getTranssum() {
	return m_transsum;
}
/**
 * 属性m_def1的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getDef1() {
	return m_def1;
}
/**
 * 属性m_def2的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getDef2() {
	return m_def2;
}
/**
 * 属性m_def3的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getDef3() {
	return m_def3;
}
/**
 * 属性m_def4的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getDef4() {
	return m_def4;
}
/**
 * 属性m_def5的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return String
 */
public String getDef5() {
	return m_def5;
}
/**
 * 属性m_pk_tallylog的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_pk_tallylog String
 */
public void setPk_tallylog(String newPk_tallylog) {

	m_pk_tallylog = newPk_tallylog;
}
/**
 * 属性m_pk_corp的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_pk_corp String
 */
public void setPk_corp(String newPk_corp) {

	m_pk_corp = newPk_corp;
}
/**
 * 属性m_pk_user的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_pk_user String
 */
public void setPk_user(String newPk_user) {

	m_pk_user = newPk_user;
}
/**
 * 属性m_tallydate的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_tallydate UFDate
 */
public void setTallydate(UFDate newTallydate) {

	m_tallydate = newTallydate;
}
/**
 * 属性m_newsum的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_newsum UFDouble
 */
public void setNewsum(UFDouble newNewsum) {

	m_newsum = newNewsum;
}
/**
 * 属性m_cancelsum的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_cancelsum UFDouble
 */
public void setCancelsum(UFDouble newCancelsum) {

	m_cancelsum = newCancelsum;
}
/**
 * 属性m_transsum的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_transsum UFDouble
 */
public void setTranssum(UFDouble newTranssum) {

	m_transsum = newTranssum;
}
/**
 * 属性m_def1的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_def1 String
 */
public void setDef1(String newDef1) {

	m_def1 = newDef1;
}
/**
 * 属性m_def2的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_def2 String
 */
public void setDef2(String newDef2) {

	m_def2 = newDef2;
}
/**
 * 属性m_def3的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_def3 String
 */
public void setDef3(String newDef3) {

	m_def3 = newDef3;
}
/**
 * 属性m_def4的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_def4 String
 */
public void setDef4(String newDef4) {

	m_def4 = newDef4;
}
/**
 * 属性m_def5的setter方法。
 *
 * 创建日期：(2005-10-11)
 * @param newM_def5 String
 */
public void setDef5(String newDef5) {

	m_def5 = newDef5;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2005-10-11)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_tallylog == null) {
		errFields.add(new String("m_pk_tallylog"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{ "pk_corp", "pk_user", "tallydate", "newsum", "cancelsum", "transsum", "def1", "def2", "def3", "def4", "def5" };
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2005-10-11)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_tallylog")) {
		return m_pk_tallylog;
	}
	else if (attributeName.equals("pk_corp")) {
		return m_pk_corp;
	}
	else if (attributeName.equals("pk_user")) {
		return m_pk_user;
	}
	else if (attributeName.equals("tallydate")) {
		return m_tallydate;
	}
	else if (attributeName.equals("newsum")) {
		return m_newsum;
	}
	else if (attributeName.equals("cancelsum")) {
		return m_cancelsum;
	}
	else if (attributeName.equals("transsum")) {
		return m_transsum;
	}
	else if (attributeName.equals("def1")) {
		return m_def1;
	}
	else if (attributeName.equals("def2")) {
		return m_def2;
	}
	else if (attributeName.equals("def3")) {
		return m_def3;
	}
	else if (attributeName.equals("def4")) {
		return m_def4;
	}
	else if (attributeName.equals("def5")) {
		return m_def5;
	}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2005-10-11)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_tallylog")) {
			m_pk_tallylog = (String) value;
		}
		else if (name.equals("pk_corp")) {
			m_pk_corp = (String) value;
		}
		else if (name.equals("pk_user")) {
			m_pk_user = (String) value;
		}
		else if (name.equals("tallydate")) {
			m_tallydate = (UFDate) value;
		}
		else if (name.equals("newsum")) {
			m_newsum = (UFDouble) value;
		}
		else if (name.equals("cancelsum")) {
			m_cancelsum = (UFDouble) value;
		}
		else if (name.equals("transsum")) {
			m_transsum = (UFDouble) value;
		}
		else if (name.equals("def1")) {
			m_def1 = (String) value;
		}
		else if (name.equals("def2")) {
			m_def2 = (String) value;
		}
		else if (name.equals("def3")) {
			m_def3 = (String) value;
		}
		else if (name.equals("def4")) {
			m_def4 = (String) value;
		}
		else if (name.equals("def5")) {
			m_def5 = (String) value;
		}
	}
	catch (ClassCastException e) {
		throw new ClassCastException("setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）");
	}
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_tallylogField() {

	if(m_pk_tallylogField == null){
		try{
			m_pk_tallylogField = new StringField();
			// 属性的名称
			m_pk_tallylogField.setName("pk_tallylog");
			// 属性的描述
			m_pk_tallylogField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_tallylogField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_corpField() {

	if(m_pk_corpField == null){
		try{
			m_pk_corpField = new StringField();
			// 属性的名称
			m_pk_corpField.setName("pk_corp");
			// 属性的描述
			m_pk_corpField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_corpField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_userField() {

	if(m_pk_userField == null){
		try{
			m_pk_userField = new StringField();
			// 属性的名称
			m_pk_userField.setName("pk_user");
			// 属性的描述
			m_pk_userField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_userField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static UFDateField getTallydateField() {

	if(m_tallydateField == null){
		try{
			m_tallydateField = new UFDateField();
			// 属性的名称
			m_tallydateField.setName("tallydate");
			// 属性的描述
			m_tallydateField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tallydateField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static UFDoubleField getNewsumField() {

	if(m_newsumField == null){
		try{
			m_newsumField = new UFDoubleField();
			// 属性的名称
			m_newsumField.setName("newsum");
			// 属性的描述
			m_newsumField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_newsumField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static UFDoubleField getCancelsumField() {

	if(m_cancelsumField == null){
		try{
			m_cancelsumField = new UFDoubleField();
			// 属性的名称
			m_cancelsumField.setName("cancelsum");
			// 属性的描述
			m_cancelsumField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_cancelsumField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static UFDoubleField getTranssumField() {

	if(m_transsumField == null){
		try{
			m_transsumField = new UFDoubleField();
			// 属性的名称
			m_transsumField.setName("transsum");
			// 属性的描述
			m_transsumField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_transsumField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef1Field() {

	if(m_def1Field == null){
		try{
			m_def1Field = new StringField();
			// 属性的名称
			m_def1Field.setName("def1");
			// 属性的描述
			m_def1Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def1Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef2Field() {

	if(m_def2Field == null){
		try{
			m_def2Field = new StringField();
			// 属性的名称
			m_def2Field.setName("def2");
			// 属性的描述
			m_def2Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def2Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef3Field() {

	if(m_def3Field == null){
		try{
			m_def3Field = new StringField();
			// 属性的名称
			m_def3Field.setName("def3");
			// 属性的描述
			m_def3Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def3Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef4Field() {

	if(m_def4Field == null){
		try{
			m_def4Field = new StringField();
			// 属性的名称
			m_def4Field.setName("def4");
			// 属性的描述
			m_def4Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def4Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef5Field() {

	if(m_def5Field == null){
		try{
			m_def5Field = new StringField();
			// 属性的名称
			m_def5Field.setName("def5");
			// 属性的描述
			m_def5Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def5Field;
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2005-10-11)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_tallylogField(), getPk_corpField(), getPk_userField(), getTallydateField(), getNewsumField(), getCancelsumField(), getTranssumField(), getDef1Field(), getDef2Field(), getDef3Field(), getDef4Field(), getDef5Field()};

	return fields;
}
}