/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.lowcost.trans;

import java.util.ArrayList;

import nc.ui.bd.CorpBO_Client;
import nc.ui.bd.b04.DeptdocBO_Client;
import nc.ui.lowcost.card.CardBO_Client;
import nc.ui.lowcost.type.TypeBO_Client;
import nc.vo.bd.CorpVO;
import nc.vo.bd.b04.DeptdocVO;
import nc.vo.lowcost.card.CardVO;
import nc.vo.lowcost.tool.NumFormate;
import nc.vo.lowcost.type.TypeVO;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
/**
 * 此处插入类型说明。
 * 
 * 创建日期：(2005-9-22)
 * @author：
 */
//public class TransItemVO extends CircularlyAccessibleValueObject {
public class TransItemVO extends SuperVO {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2582032382496210594L;
	public String m_pk_trans_m;
	public String m_pk_trans;
	public String m_pk_lccard;
	public String m_pk_deptfrom;
	public String m_pk_deptto;
	public String m_def1;
	public String m_def2;
	public String m_def3;
	public String m_def4;
	public String m_def5;
	public UFDateTime m_ts;
	
	public boolean bTransToBank = false;
	public CardVO card = null;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_trans_mField;
	private static StringField m_pk_transField;
	private static StringField m_pk_lccardField;
	private static StringField m_pk_deptfromField;
	private static StringField m_pk_depttoField;
	private static StringField m_def1Field;
	private static StringField m_def2Field;
	private static StringField m_def3Field;
	private static StringField m_def4Field;
	private static StringField m_def5Field;
	
	//
	private CardVO m_cardvo = null;
	//private TypeVO m_typevo = null;
	
	
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2005-9-22)
 */
public TransItemVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2005-9-22)
 * @param ??fieldNameForMethod?? 主键值
 */
public TransItemVO(String newPk_trans_m) {

	// 为主键字段赋值:
	m_pk_trans_m = newPk_trans_m;
}

/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2005-9-22)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "TransM";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_trans_m;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2005-9-22)
 * @param m_pk_trans_m String 
 */
public void setPrimaryKey(String newPk_trans_m) {

	m_pk_trans_m = newPk_trans_m;
}
/**
 * 属性m_pk_trans_m的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPk_trans_m() {
	return m_pk_trans_m;
}
/**
 * 属性m_pk_trans的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPk_trans() {
	return m_pk_trans;
}
/**
 * 属性m_pk_lccard的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPk_lccard() {
	return m_pk_lccard;
}
/**
 * 属性m_pk_deptfrom的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPk_deptfrom() {
	return m_pk_deptfrom;
}
/**
 * 属性m_pk_deptto的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPk_deptto() {
	return m_pk_deptto;
}
/**
 * 属性m_def1的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef1() {
	return m_def1;
}
/**
 * 属性m_def2的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef2() {
	return m_def2;
}
/**
 * 属性m_def3的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef3() {
	return m_def3;
}
/**
 * 属性m_def4的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef4() {
	return m_def4;
}
/**
 * 属性m_def5的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef5() {
	return m_def5;
}
/**
 * 属性m_pk_trans_m的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_pk_trans_m String
 */
public void setPk_trans_m(String newPk_trans_m) {

	m_pk_trans_m = newPk_trans_m;
}
/**
 * 属性m_pk_trans的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_pk_trans String
 */
public void setPk_trans(String newPk_trans) {

	m_pk_trans = newPk_trans;
}
/**
 * 属性m_pk_lccard的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_pk_lccard String
 */
public void setPk_lccard(String newPk_lccard) {

	m_pk_lccard = newPk_lccard;
}
/**
 * 属性m_pk_deptfrom的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_pk_deptfrom String
 */
public void setPk_deptfrom(String newPk_deptfrom) {

	m_pk_deptfrom = newPk_deptfrom;
}
/**
 * 属性m_pk_deptto的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_pk_deptto String
 */
public void setPk_deptto(String newPk_deptto) {

	m_pk_deptto = newPk_deptto;
}
/**
 * 属性m_def1的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def1 String
 */
public void setDef1(String newDef1) {

	m_def1 = newDef1;
}
/**
 * 属性m_def2的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def2 String
 */
public void setDef2(String newDef2) {

	m_def2 = newDef2;
}
/**
 * 属性m_def3的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def3 String
 */
public void setDef3(String newDef3) {

	m_def3 = newDef3;
}
/**
 * 属性m_def4的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def4 String
 */
public void setDef4(String newDef4) {

	m_def4 = newDef4;
}
/**
 * 属性m_def5的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def5 String
 */
public void setDef5(String newDef5) {

	m_def5 = newDef5;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2005-9-22)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_trans_m == null) {
		errFields.add(new String("m_pk_trans_m"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{"pk_trans_m", "pk_trans", "pk_lccard", "pk_deptfrom", "pk_deptto", "def1", "def2", "def3", "def4", "def5"};
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2005-9-22)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_trans_m")) {
		return m_pk_trans_m;
	}
	else if (attributeName.equals("pk_trans")) {
		return m_pk_trans;
	}
	else if (attributeName.equals("pk_lccard")) {
		return m_pk_lccard;
	}
	else if (attributeName.equals("pk_deptfrom")) {
		return m_pk_deptfrom;
	}
	else if (attributeName.equals("pk_deptto")) {
		return m_pk_deptto;
	}
	else if (attributeName.equals("def1")) {
		return m_def1;
	}
	else if (attributeName.equals("def2")) {
		return m_def2;
	}
	else if (attributeName.equals("def3")) {
		return m_def3;
	}
	else if (attributeName.equals("def4")) {
		return m_def4;
	}
	else if (attributeName.equals("def5")) {
		return m_def5;
	}
	else if (attributeName.equals("price")) {
	    return NumFormate.getPrecisionData(getCardVO().getPrice(),2);
	}
	else if (attributeName.equals("lcnumber")) {
	    return NumFormate.getPrecisionData(getCardVO().getNumber(),0);
	}
	else if (attributeName.equals("totalsum")) {
	    return NumFormate.getPrecisionData(new UFDouble(getCardVO().getPrice().doubleValue()*getCardVO().getNumber().doubleValue()),2);
	}
	else if (attributeName.equals("lctype")) {
	    String lctype = null;
	    try {
            TypeVO tvo = TypeBO_Client.findByPrimaryKey(getCardVO().getPk_lctype());
            lctype = tvo.getLctypecode() + " " + tvo.getLctypename();
        } catch (Exception e) {
            
        }
	    return lctype;
	}	
	else if (attributeName.equals("corpfrom")){
	    String corpfrom = null;
	    try {
            DeptdocVO dcvo = DeptdocBO_Client.findByPrimaryKey(m_pk_deptfrom);
            CorpVO cvo = CorpBO_Client.findByPrimaryKey(dcvo.getPk_corp());
            corpfrom = cvo.getUnitname();
        } catch (Exception e) {
            
        }
        return corpfrom;
	}
	else if (attributeName.equals("corpto")){
	    String corpto = null;
	    try {
            DeptdocVO dcvo = DeptdocBO_Client.findByPrimaryKey(m_pk_deptto);
            CorpVO cvo = CorpBO_Client.findByPrimaryKey(dcvo.getPk_corp());
            corpto = cvo.getUnitname();            
        } catch (Exception e) {

        }
        return corpto;
	}
	else if (attributeName.equals("ts")){
	    return m_ts;
	}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2005-9-22)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_trans_m")) {
			m_pk_trans_m = (String) value;
		}
		else if (name.equals("pk_trans")) {
			m_pk_trans = (String) value;
		}
		else if (name.equals("pk_lccard")) {
			m_pk_lccard = (String) value;
		}
		else if (name.equals("pk_deptfrom")) {
			m_pk_deptfrom = (String) value;
		}
		else if (name.equals("pk_deptto")) {
			m_pk_deptto = (String) value;
		}
		else if (name.equals("def1")) {
			m_def1 = (String) value;
		}
		else if (name.equals("def2")) {
			m_def2 = (String) value;
		}
		else if (name.equals("def3")) {
			m_def3 = (String) value;
		}
		else if (name.equals("def4")) {
			m_def4 = (String) value;
		}
		else if (name.equals("def5")) {
			m_def5 = (String) value;
		}
		else if (name.equals("ts")){
		    m_ts = (UFDateTime) value;
		}
	}
	catch (ClassCastException e) {
		throw new ClassCastException("setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）");
	}
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_trans_mField() {

	if(m_pk_trans_mField == null){
		try{
			m_pk_trans_mField = new StringField();
			// 属性的名称
			m_pk_trans_mField.setName("pk_trans_m");
			// 属性的描述
			m_pk_trans_mField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_trans_mField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_transField() {

	if(m_pk_transField == null){
		try{
			m_pk_transField = new StringField();
			// 属性的名称
			m_pk_transField.setName("pk_trans");
			// 属性的描述
			m_pk_transField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_transField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_lccardField() {

	if(m_pk_lccardField == null){
		try{
			m_pk_lccardField = new StringField();
			// 属性的名称
			m_pk_lccardField.setName("pk_lccard");
			// 属性的描述
			m_pk_lccardField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_lccardField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_deptfromField() {

	if(m_pk_deptfromField == null){
		try{
			m_pk_deptfromField = new StringField();
			// 属性的名称
			m_pk_deptfromField.setName("pk_deptfrom");
			// 属性的描述
			m_pk_deptfromField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_deptfromField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_depttoField() {

	if(m_pk_depttoField == null){
		try{
			m_pk_depttoField = new StringField();
			// 属性的名称
			m_pk_depttoField.setName("pk_deptto");
			// 属性的描述
			m_pk_depttoField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_depttoField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef1Field() {

	if(m_def1Field == null){
		try{
			m_def1Field = new StringField();
			// 属性的名称
			m_def1Field.setName("def1");
			// 属性的描述
			m_def1Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def1Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef2Field() {

	if(m_def2Field == null){
		try{
			m_def2Field = new StringField();
			// 属性的名称
			m_def2Field.setName("def2");
			// 属性的描述
			m_def2Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def2Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef3Field() {

	if(m_def3Field == null){
		try{
			m_def3Field = new StringField();
			// 属性的名称
			m_def3Field.setName("def3");
			// 属性的描述
			m_def3Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def3Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef4Field() {

	if(m_def4Field == null){
		try{
			m_def4Field = new StringField();
			// 属性的名称
			m_def4Field.setName("def4");
			// 属性的描述
			m_def4Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def4Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef5Field() {

	if(m_def5Field == null){
		try{
			m_def5Field = new StringField();
			// 属性的名称
			m_def5Field.setName("def5");
			// 属性的描述
			m_def5Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def5Field;
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_trans_mField(), getPk_transField(), getPk_lccardField(), getPk_deptfromField(), getPk_depttoField(), getDef1Field(), getDef2Field(), getDef3Field(), getDef4Field(), getDef5Field()};

	return fields;
}
/* （非 Javadoc）
 * @see nc.vo.pub.SuperVO#getParentPKFieldName()
 */
public String getParentPKFieldName() {
    // TODO 自动生成方法存根
    return "pk_trans";
}
/* （非 Javadoc）
 * @see nc.vo.pub.SuperVO#getPKFieldName()
 */
public String getPKFieldName() {
    // TODO 自动生成方法存根
    return "pk_trans_m";
}
/* （非 Javadoc）
 * @see nc.vo.pub.SuperVO#getTableName()
 */
public String getTableName() {
    // TODO 自动生成方法存根
    return "lc_trans_m";
}

public CardVO getCardVO (){
    if(m_cardvo==null){
        try {
            if(m_cardvo==null){
                m_cardvo = CardBO_Client.findByPrimaryKey(m_pk_lccard);
            }
        } catch (Exception e){
            System.out.println("------sunrui err log---------:" + "TransItemVO::getCardVO()" + e.getMessage());
            e.printStackTrace();
        }
    }
    return m_cardvo;
}

}