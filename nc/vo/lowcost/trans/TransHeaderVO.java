/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.lowcost.trans;

import java.util.ArrayList;

import nc.ui.sm.user.UserBO_Client;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;
import nc.vo.sm.UserVO;
import nc.vo.trade.pub.IBillStatus;
/**
 * 此处插入类型说明。
 * 
 * 创建日期：(2005-9-22)
 * @author：
 */
public class TransHeaderVO extends SuperVO {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5789202429242477061L;
	public String m_pk_trans;
	public String m_transcode;
	public String m_transreason;
	public String m_pk_maker;
	public UFDate m_makedate;
	public String m_pk_checker;
	public UFDate m_checkdate;
	public UFBoolean m_checkflag;
	public UFBoolean m_tallyflag;
	public UFDate m_tallydate;
	public String m_def1;
	public String m_def2;
	public String m_def3;
	public String m_def4;
	public String m_def5;
	public UFDateTime m_ts;
	
	public String m_pk_corp = null;
	public String m_pk_operator = null;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_transField;
	private static StringField m_transcodeField;
	private static StringField m_transreasonField;
	private static StringField m_pk_makerField;
	private static UFDateField m_makedateField;
	private static StringField m_pk_checkerField;
	private static UFDateField m_checkdateField;
	private static UFBooleanField m_checkflagField;
	private static UFBooleanField m_tallyflagField;
	private static UFDateField m_tallydateField;
	private static StringField m_def1Field;
	private static StringField m_def2Field;
	private static StringField m_def3Field;
	private static StringField m_def4Field;
	private static StringField m_def5Field;
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2005-9-22)
 */
public TransHeaderVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2005-9-22)
 * @param ??fieldNameForMethod?? 主键值
 */
public TransHeaderVO(String newPk_trans) {

	// 为主键字段赋值:
	m_pk_trans = newPk_trans;
}

/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2005-9-22)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Trans";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_trans;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2005-9-22)
 * @param m_pk_trans String 
 */
public void setPrimaryKey(String newPk_trans) {

	m_pk_trans = newPk_trans;
}
/**
 * 属性m_pk_trans的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPk_trans() {
	return m_pk_trans;
}
/**
 * 属性m_transcode的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getTranscode() {
	return m_transcode;
}
/**
 * 属性m_transreason的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getTransreason() {
	return m_transreason;
}
/**
 * 属性m_pk_maker的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPk_maker() {
	return m_pk_maker;
}
/**
 * 属性m_makedate的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return UFDate
 */
public UFDate getMakedate() {
	return m_makedate;
}
/**
 * 属性m_pk_checker的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getPk_checker() {
	return m_pk_checker;
}
/**
 * 属性m_checkdate的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return UFDate
 */
public UFDate getCheckdate() {
	return m_checkdate;
}
/**
 * 属性m_checkflag的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return UFBoolean
 */
public UFBoolean getCheckflag() {
	return m_checkflag;
}
/**
 * 属性m_tallyflag的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return UFBoolean
 */
public UFBoolean getTallyflag() {
	return m_tallyflag;
}
/**
 * 属性m_tallydate的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return UFDate
 */
public UFDate getTallydate() {
	return m_tallydate;
}
/**
 * 属性m_def1的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef1() {
	return m_def1;
}
/**
 * 属性m_def2的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef2() {
	return m_def2;
}
/**
 * 属性m_def3的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef3() {
	return m_def3;
}
/**
 * 属性m_def4的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef4() {
	return m_def4;
}
/**
 * 属性m_def5的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return String
 */
public String getDef5() {
	return m_def5;
}
/**
 * 属性m_pk_trans的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_pk_trans String
 */
public void setPk_trans(String newPk_trans) {

	m_pk_trans = newPk_trans;
}
/**
 * 属性m_transcode的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_transcode String
 */
public void setTranscode(String newTranscode) {

	m_transcode = newTranscode;
}
/**
 * 属性m_transreason的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_transreason String
 */
public void setTransreason(String newTransreason) {

	m_transreason = newTransreason;
}
/**
 * 属性m_pk_maker的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_pk_maker String
 */
public void setPk_maker(String newPk_maker) {

	m_pk_maker = newPk_maker;
}
/**
 * 属性m_makedate的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_makedate UFDate
 */
public void setMakedate(UFDate newMakedate) {

	m_makedate = newMakedate;
}
/**
 * 属性m_pk_checker的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_pk_checker String
 */
public void setPk_checker(String newPk_checker) {

	m_pk_checker = newPk_checker;
}
/**
 * 属性m_checkdate的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_checkdate UFDate
 */
public void setCheckdate(UFDate newCheckdate) {

	m_checkdate = newCheckdate;
}
/**
 * 属性m_checkflag的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_checkflag UFBoolean
 */
public void setCheckflag(UFBoolean newCheckflag) {

	m_checkflag = newCheckflag;
}
/**
 * 属性m_tallyflag的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_tallyflag UFBoolean
 */
public void setTallyflag(UFBoolean newTallyflag) {

	m_tallyflag = newTallyflag;
}
/**
 * 属性m_tallydate的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_tallydate UFDate
 */
public void setTallydate(UFDate newTallydate) {

	m_tallydate = newTallydate;
}
/**
 * 属性m_def1的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def1 String
 */
public void setDef1(String newDef1) {

	m_def1 = newDef1;
}
/**
 * 属性m_def2的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def2 String
 */
public void setDef2(String newDef2) {

	m_def2 = newDef2;
}
/**
 * 属性m_def3的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def3 String
 */
public void setDef3(String newDef3) {

	m_def3 = newDef3;
}
/**
 * 属性m_def4的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def4 String
 */
public void setDef4(String newDef4) {

	m_def4 = newDef4;
}
/**
 * 属性m_def5的setter方法。
 *
 * 创建日期：(2005-9-22)
 * @param newM_def5 String
 */
public void setDef5(String newDef5) {

	m_def5 = newDef5;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2005-9-22)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_trans == null) {
		errFields.add(new String("m_pk_trans"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{"pk_trans", "transcode", "transreason", "pk_maker", "makedate", "pk_checker", "checkdate", "checkflag", "tallyflag", "tallydate", "def1", "def2", "def3", "def4", "def5" };
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2005-9-22)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {
    
	if (attributeName.equals("pk_trans")) {
		return m_pk_trans;
	}
	else if (attributeName.equals("transcode")) {
		return m_transcode;
	}
	else if (attributeName.equals("transreason")) {
		return m_transreason;
	}
	else if (attributeName.equals("pk_maker")) {
		return m_pk_maker;
	}
	else if (attributeName.equals("makedate")) {
		return m_makedate;
	}
	else if (attributeName.equals("pk_checker")) {
		return m_pk_checker;
	}
	else if (attributeName.equals("checkdate")) {
		return m_checkdate;
	}
	else if (attributeName.equals("checkflag")) {
		return m_checkflag;
	}
	else if (attributeName.equals("tallyflag")) {
		return m_tallyflag;
	}
	else if (attributeName.equals("tallydate")) {
		return m_tallydate;
	}
	else if (attributeName.equals("def1")) {
		return m_def1;
	}
	else if (attributeName.equals("def2")) {
		return m_def2;
	}
	else if (attributeName.equals("def3")) {
		return m_def3;
	}
	else if (attributeName.equals("def4")) {
		return m_def4;
	}
	else if (attributeName.equals("def5")) {
		return m_def5;
	}
	else if (attributeName.equals("makername")){
	    String makername = null;
	    try {
            UserVO [] uvos = UserBO_Client.queryUsersByCondition(" cuserid = '" + m_pk_maker + "'");
            if(uvos!=null && uvos.length>0){
                makername = uvos[0].getUserName();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return makername;
	}
	else if(attributeName.equals("vbillstatus")){
	    int djstatus = IBillStatus.FREE;
	    if(m_checkflag==null){
	        if(m_pk_checker==null) {
	            djstatus = IBillStatus.FREE;
	        } else {
	            djstatus = IBillStatus.CHECKGOING;
	        }
	    } else {
	        if(m_checkflag.booleanValue()) {
	            djstatus = IBillStatus.CHECKPASS;
	        } else {
	            djstatus = IBillStatus.NOPASS;
	        }
	    }
	    return new Integer(djstatus);
	}
	else if (attributeName.equals("ts")){
	    return m_ts;
	}
	else if (attributeName.equals("djstatus")) {
	    String djstatus = null;
	    if(m_checkflag==null){
	        if(m_pk_checker==null || m_pk_checker.trim().length()==0) {
	            djstatus = "未审核";
	        } else {
	            djstatus = "审核中";
	        }
	    } else {
	        if(m_checkflag.booleanValue()) {
	            djstatus = "审核通过";
	        } else {
	            djstatus = "审核未通过";
	        }
	    }
	    return djstatus;
	}
	else if (attributeName.equals("tallystatus")) {
	    if(m_tallyflag==null || m_tallyflag.equals(new UFBoolean(false))) {
	        return "未记账";
	    } else {
	        return "已记账";
	    }
	}
	else if (attributeName.equals("pk_corp")){
	    return m_pk_corp;
	}
	else if (attributeName.equals("pk_operator")) {
	    return m_pk_operator;
	}
	else if (attributeName.equals("checkname")) {
	    String checkname = null;
	    try {
	        if(m_pk_checker!=null && m_pk_checker.trim().length()!=0){
	            UserVO [] uvos = UserBO_Client.queryUsersByCondition(" cuserid = '" + m_pk_checker + "'");
	            if(uvos!=null && uvos.length>0){
	                checkname = uvos[0].getUserName();
	            }
	        }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return checkname;	    
	}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2005-9-22)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
	    if(value!=null && value instanceof String){
	        String strValue = (String) value;
	        if(strValue.trim().length()==0){
	            value=null;
	        }
	    }
		if (name.equals("pk_trans")) {
			m_pk_trans = (String) value;
		}
		else if (name.equals("transcode")) {
			m_transcode = (String) value;
		}
		else if (name.equals("transreason")) {
			m_transreason = (String) value;
		}
		else if (name.equals("pk_maker")) {
			m_pk_maker = (String) value;
		}
		else if (name.equals("makedate")) {
		    if(value instanceof String){
		        m_makedate = new UFDate((String)value);
		    } else {
		        if(value instanceof UFDate){
		            m_makedate = (UFDate)value;
		        }
		    }
		}
		else if (name.equals("pk_checker")) {
			m_pk_checker = (String) value;
		}
		else if (name.equals("checkdate")) {
		    if(value instanceof String){
		        m_checkdate = new UFDate((String)value);
		    } else {
		        if(value instanceof UFDate){
		            m_checkdate = (UFDate)value;
		        }
		    }
		}
		else if (name.equals("checkflag")) {
		    if(value instanceof String){
		        if(value==null || ((String)value).trim().length()==0){
		            m_checkflag = null;
		        } else {
		            m_checkflag = new UFBoolean((String)value);
		        }
		    } else {
		        if(value instanceof UFBoolean){
		            m_checkflag = (UFBoolean)value;
		        }
		    }
		}
		else if (name.equals("tallyflag")) {
		    if(value instanceof String){
		        if(value==null || ((String)value).trim().length()==0){
		            m_tallyflag = null;
		        } else {
		            m_tallyflag = new UFBoolean((String)value);
		        }
		    } else {
		        if(value instanceof UFBoolean){
		            m_tallyflag = (UFBoolean)value;
		        }
		    }
		}
		else if (name.equals("tallydate")) {
		    if(value instanceof String){
		        m_tallydate = new UFDate((String)value);
//		        int m = 8;
		    } else {
		        if(value instanceof UFDate){
		            m_tallydate = (UFDate)value;
		        }
		    }
		}
		else if (name.equals("def1")) {
			m_def1 = (String) value;
		}
		else if (name.equals("def2")) {
			m_def2 = (String) value;
		}
		else if (name.equals("def3")) {
			m_def3 = (String) value;
		}
		else if (name.equals("def4")) {
			m_def4 = (String) value;
		}
		else if (name.equals("def5")) {
			m_def5 = (String) value;
		}
		else if (name.equals("ts")){
		    m_ts = (UFDateTime) value;
		}
	}
	catch (ClassCastException e) {
		throw new ClassCastException("setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）");
	}
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_transField() {

	if(m_pk_transField == null){
		try{
			m_pk_transField = new StringField();
			// 属性的名称
			m_pk_transField.setName("pk_trans");
			// 属性的描述
			m_pk_transField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_transField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getTranscodeField() {

	if(m_transcodeField == null){
		try{
			m_transcodeField = new StringField();
			// 属性的名称
			m_transcodeField.setName("transcode");
			// 属性的描述
			m_transcodeField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_transcodeField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getTransreasonField() {

	if(m_transreasonField == null){
		try{
			m_transreasonField = new StringField();
			// 属性的名称
			m_transreasonField.setName("transreason");
			// 属性的描述
			m_transreasonField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_transreasonField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_makerField() {

	if(m_pk_makerField == null){
		try{
			m_pk_makerField = new StringField();
			// 属性的名称
			m_pk_makerField.setName("pk_maker");
			// 属性的描述
			m_pk_makerField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_makerField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static UFDateField getMakedateField() {

	if(m_makedateField == null){
		try{
			m_makedateField = new UFDateField();
			// 属性的名称
			m_makedateField.setName("makedate");
			// 属性的描述
			m_makedateField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_makedateField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_checkerField() {

	if(m_pk_checkerField == null){
		try{
			m_pk_checkerField = new StringField();
			// 属性的名称
			m_pk_checkerField.setName("pk_checker");
			// 属性的描述
			m_pk_checkerField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_checkerField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static UFDateField getCheckdateField() {

	if(m_checkdateField == null){
		try{
			m_checkdateField = new UFDateField();
			// 属性的名称
			m_checkdateField.setName("checkdate");
			// 属性的描述
			m_checkdateField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_checkdateField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static UFBooleanField getCheckflagField() {

	if(m_checkflagField == null){
		try{
			m_checkflagField = new UFBooleanField();
			// 属性的名称
			m_checkflagField.setName("checkflag");
			// 属性的描述
			m_checkflagField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_checkflagField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static UFBooleanField getTallyflagField() {

	if(m_tallyflagField == null){
		try{
			m_tallyflagField = new UFBooleanField();
			// 属性的名称
			m_tallyflagField.setName("tallyflag");
			// 属性的描述
			m_tallyflagField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tallyflagField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static UFDateField getTallydateField() {

	if(m_tallydateField == null){
		try{
			m_tallydateField = new UFDateField();
			// 属性的名称
			m_tallydateField.setName("tallydate");
			// 属性的描述
			m_tallydateField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_tallydateField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef1Field() {

	if(m_def1Field == null){
		try{
			m_def1Field = new StringField();
			// 属性的名称
			m_def1Field.setName("def1");
			// 属性的描述
			m_def1Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def1Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef2Field() {

	if(m_def2Field == null){
		try{
			m_def2Field = new StringField();
			// 属性的名称
			m_def2Field.setName("def2");
			// 属性的描述
			m_def2Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def2Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef3Field() {

	if(m_def3Field == null){
		try{
			m_def3Field = new StringField();
			// 属性的名称
			m_def3Field.setName("def3");
			// 属性的描述
			m_def3Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def3Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef4Field() {

	if(m_def4Field == null){
		try{
			m_def4Field = new StringField();
			// 属性的名称
			m_def4Field.setName("def4");
			// 属性的描述
			m_def4Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def4Field;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getDef5Field() {

	if(m_def5Field == null){
		try{
			m_def5Field = new StringField();
			// 属性的名称
			m_def5Field.setName("def5");
			// 属性的描述
			m_def5Field.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_def5Field;
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2005-9-22)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_transField(), getTranscodeField(), getTransreasonField(), getPk_makerField(), getMakedateField(), getPk_checkerField(), getCheckdateField(), getCheckflagField(), getTallyflagField(), getTallydateField(), getDef1Field(), getDef2Field(), getDef3Field(), getDef4Field(), getDef5Field()};

	return fields;
}
/* （非 Javadoc）
 * @see nc.vo.pub.SuperVO#getParentPKFieldName()
 */
public String getParentPKFieldName() {
    // TODO 自动生成方法存根
    return null;
}
/* （非 Javadoc）
 * @see nc.vo.pub.SuperVO#getPKFieldName()
 */
public String getPKFieldName() {
    // TODO 自动生成方法存根
    return "pk_trans";
}
/* （非 Javadoc）
 * @see nc.vo.pub.SuperVO#getTableName()
 */
public String getTableName() {
    // TODO 自动生成方法存根
    return "lc_trans";
}
}