/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.lowcost.subj;

import java.util.ArrayList;
import nc.vo.pub.*;
/**
 * 此处插入类型说明。
 * 
 * 创建日期：(2006-2-7)
 * @author：
 */
public class SubjVO extends CircularlyAccessibleValueObject {

	/**
	 * 
	 */
	private static final long serialVersionUID = -827605958436858871L;
	public String m_pk_subj;
	public String m_pk_corp;
	public String m_bank_kmbm;
	public String pk_lctype;

	/**
	 *     描述上面属性的FieldObjects。主要用于系统工具中，
	 * 业务代码中不会用到下面的FieldObjects。
	 */
	private static StringField m_pk_subjField;
	private static StringField m_pk_corpField;
	private static StringField m_bank_kmbmField;
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2006-2-7)
 */
public SubjVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2006-2-7)
 * @param ??fieldNameForMethod?? 主键值
 */
public SubjVO(String newPk_subj) {

	// 为主键字段赋值:
	m_pk_subj = newPk_subj;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2006-2-7)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	SubjVO subj = (SubjVO)o;

	// 你在下面复制本VO对象的所有属性：

	return subj;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2006-2-7)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Subj";
}
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2006-2-7)
 * @return String
 */
public String getPrimaryKey() {

	return m_pk_subj;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2006-2-7)
 * @param m_pk_subj String 
 */
public void setPrimaryKey(String newPk_subj) {

	m_pk_subj = newPk_subj;
}
/**
 * 属性m_pk_subj的Getter方法。
 *
 * 创建日期：(2006-2-7)
 * @return String
 */
public String getPk_subj() {
	return m_pk_subj;
}
/**
 * 属性m_pk_corp的Getter方法。
 *
 * 创建日期：(2006-2-7)
 * @return String
 */
public String getPk_corp() {
	return m_pk_corp;
}
/**
 * 属性m_bank_kmbm的Getter方法。
 *
 * 创建日期：(2006-2-7)
 * @return String
 */
public String getBank_kmbm() {
	return m_bank_kmbm;
}
/**
 * 属性m_pk_subj的setter方法。
 *
 * 创建日期：(2006-2-7)
 * @param newM_pk_subj String
 */
public void setPk_subj(String newPk_subj) {

	m_pk_subj = newPk_subj;
}
/**
 * 属性m_pk_corp的setter方法。
 *
 * 创建日期：(2006-2-7)
 * @param newM_pk_corp String
 */
public void setPk_corp(String newPk_corp) {

	m_pk_corp = newPk_corp;
}
/**
 * 属性m_bank_kmbm的setter方法。
 *
 * 创建日期：(2006-2-7)
 * @param newM_bank_kmbm String
 */
public void setBank_kmbm(String newBank_kmbm) {

	m_bank_kmbm = newBank_kmbm;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2006-2-7)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_pk_subj == null) {
		errFields.add(new String("m_pk_subj"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{ "pk_corp", "bank_kmbm" };
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2006-2-7)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("pk_subj")) {
		return m_pk_subj;
	}
	else if (attributeName.equals("pk_corp")) {
		return m_pk_corp;
	}
	else if (attributeName.equals("bank_kmbm")) {
		return m_bank_kmbm;
	}
	else if (attributeName.equals("pk_lctype")){
	    return pk_lctype;
	}
	return null;
}
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2006-2-7)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("pk_subj")) {
			m_pk_subj = (String) value;
		}
		else if (name.equals("pk_corp")) {
			m_pk_corp = (String) value;
		}
		else if (name.equals("bank_kmbm")) {
			m_bank_kmbm = (String) value;
		}
		else if (name.equals("pk_lctype")) {
		    pk_lctype = (String) value;
		}
	}
	catch (ClassCastException e) {
		throw new ClassCastException("setAttributeValue方法中为 " + name + " 赋值时类型转换错误！（值：" + value + "）");
	}
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_subjField() {

	if(m_pk_subjField == null){
		try{
			m_pk_subjField = new StringField();
			// 属性的名称
			m_pk_subjField.setName("pk_subj");
			// 属性的描述
			m_pk_subjField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_subjField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getPk_corpField() {

	if(m_pk_corpField == null){
		try{
			m_pk_corpField = new StringField();
			// 属性的名称
			m_pk_corpField.setName("pk_corp");
			// 属性的描述
			m_pk_corpField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_pk_corpField;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.pub.FieldObject
 */
public static StringField getBank_kmbmField() {

	if(m_bank_kmbmField == null){
		try{
			m_bank_kmbmField = new StringField();
			// 属性的名称
			m_bank_kmbmField.setName("bank_kmbm");
			// 属性的描述
			m_bank_kmbmField.setLabel("null");
			// 请添加对本属性的期它描述：

		}catch(Throwable exception){
			handleException(exception);
		}
	}
	return m_bank_kmbmField;
}
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2006-2-7)
 * @return nc.vo.pub.FieldObject[]
 */
public FieldObject[] getFields() {

	FieldObject[] fields = {getPk_subjField(), getPk_corpField(), getBank_kmbmField()};

	return fields;
}
    /**
     * @return 返回 pk_lctype。
     */
    public String getPk_lctype() {
        return pk_lctype;
    }
    /**
     * @param pk_lctype 要设置的 pk_lctype。
     */
    public void setPk_lctype(String pk_lctype) {
        this.pk_lctype = pk_lctype;
    }
}